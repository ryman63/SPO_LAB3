architecture DynamicVM {
    registers:
        storage R0[32];
        storage R1[32];
        storage R2[32];
        storage R3[32];
        storage R4[32];
        storage R5[32];
        storage R6[32];
        storage R7[32];
        storage PC[32];                        // Счетчик команд (Program Counter)
        storage SP[32];                        // Указатель стека (Stack Pointer)
        storage FLAGS[4];                      // Регистр флагов (Zero, Negative, Carry, Overflow)
        storage IN[8];                          // Регистр для ввода 
        storage OUT[8];                         // Регистр для вывода
        storage HALT_FLAG[1];                  // Флаг остановки (для инструкции hlt)
        storage RAR[32];                       // return address register
        storage BP[32];                        // base pointer
        storage TMP[32];                        // temp

        view gp0 = R0;        // Регистр общего назначения
        view gp1 = R1;        // Регистр общего назначения
        view gp2 = R2;        // Регистр общего назначения
        view gp3 = R3;        // Регистр общего назначения
        view gp4 = R4;        // Регистр общего назначения
        view gp5 = R5;        // Регистр общего назначения
        view gp6 = R6;        // Регистр общего назначения
        view gp7 = R7;        // Регистр общего назначения
        view ZeroFlag = FLAGS[0];              // Флаг нуля
        view NegativeFlag = FLAGS[1];          // Флаг отрицания
        view CarryFlag = FLAGS[2];             // Флаг переноса
        view OverflowFlag = FLAGS[3];          // Флаг переполнения
        view sp = SP;
        view bp = BP;
        view iv = IN;
        view ov = OUT;
        view tmp = TMP;
        view halt_flag = HALT_FLAG;            // Флаг остановки

    memory:
        range code [0x0000..0x3FFF] {
            cell = 8;
            endianess = little-endian;
            granularity = 1;
        }

        range data_bank [0x4000..0xFFFFFFFF] {
            cell = 8;
            endianess = little-endian;
            granularity = 0;
        }

    instructions:
        encode reg field = register {
            gp0 = 0000,
            gp1 = 0001,
            gp2 = 0010,
            gp3 = 0011,
            gp4 = 0100,
            gp5 = 0101,
            gp6 = 0110,
            gp7 = 0111,
            tmp = 1000,
            sp = 1001,
            bp = 1011
        };

        encode in_out field = register {
            iv = 0,
            ov = 1
        };

        encode imm32 field = immediate[32] data;
        encode imm8 field = immediate[8] data;

        encode r_bank sequence = alternatives {
            r_data = {0},
            r_const = {1}
        };

        instruction nop = { 0000 0000 } {

        };
 
        instruction load = { 0000 0001, sequence r_bank, 000, reg as dest, imm32 as src } {
            when r_data then
                dest = data_bank:4[src];
            else 
                dest = code:4[src];
            PC = PC + 6;
        };

        instruction load_reg = { 0000 0010, sequence r_bank, 000 0000, reg as dest, reg as src } {
            when r_data then
                dest = data_bank:4[src];
            else 
                dest = code:4[src];
            PC = PC + 3;
        };

        instruction load_label_off = { 0000 0011, sequence r_bank, 000, reg as dest, imm32 as src, imm32 as off } {
            when r_data then
                dest = data_bank:4[(src + off) & 0xFFFFFFFF];
            else
                dest = code:4[(src + off) & 0x3FFF];
            PC = PC + 10;
        };

        instruction load_off_minus = { 0001 0001 0000 000, sequence r_bank, reg as dest, reg as src, imm32 as off } {
            when r_data then
                dest = data_bank:4[(src - off) & 0xFFFFFFFF];
            else 
                dest = code:4[(src - off) & 0x3FFF];
            PC = PC + 7;
        };

         instruction load_off_plus = { 0001 0011 0000 000, sequence r_bank, reg as dest, reg as src, imm32 as off } {
            when r_data then
                dest = data_bank:4[(src + off) & 0xFFFFFFFF];
            else 
                dest = code:4[(src + off) & 0x3FFF];
            PC = PC + 7;
        };

        instruction load8 = { 0001 0011 001, sequence r_bank, reg as dest, reg as src, reg as off } {
            when r_data then
                dest = data_bank:1[(src + off) & 0xFFFFFFFF];
            else 
                dest = code:1[(src + off) & 0x3FFF];
            PC = PC + 3;
        };

        instruction load32 = { 0001 0011 010, sequence r_bank, reg as dest, reg as src, reg as off } {
            when r_data then
                dest = data_bank:4[(src + off) & 0xFFFFFFFF];
            else 
                dest = code:4[(src + off) & 0x3FFF];
            PC = PC + 3;
        };

        instruction store = { 0000 0010 0000, reg as src, imm32 as dest } {
            data_bank:4[dest] = src;
            PC = PC +  6;
        };

        instruction store_off_minus = {0000 0011 0000 0000, reg as src, reg as dest, imm32 as off } {
            data_bank:4[(dest - off) & 0xFFFFFFFF] = src;
            PC = PC + 7;
        };

         instruction store_off_plus = { 0000 0100 0000 0000, reg as src, reg as dest, imm32 as off } {
            data_bank:4[(dest + off) & 0xFFFFFFFF] = src;
            PC = PC +  7;
        };

        instruction store8 = { 0110 0001 0001, reg as src, reg as dest, reg as off } {
            data_bank:1[(dest + off) & 0xFFFFFFFF] = src;
            PC = PC + 3;
        };

        instruction store32 = { 0100 0000 0010, reg as src, reg as dest, reg as off } {
            data_bank:4[(dest + off) & 0xFFFFFFFF] = src;
            PC = PC + 3;
        };

        instruction mov = { 0000 1001, reg as dest, reg as src } {
            dest = src;
            PC = PC + 2;
        };

        instruction movi = { 0000 1011, reg as src, 0000, imm32 as imm } {
            src = imm;
            PC = PC + 6;
        };

        instruction imov = { 0000 1111, reg as dest, 0000, imm32 as offset1 } {
            TMP = BP - offset1;
            dest = data_bank[TMP];
            PC = PC + 6;
        };

        instruction add = { 0 011, reg as dest, reg as src1, reg as src2 } {
            let result = (src1 + src2) & 0xFFFFFFFF;
            dest = result;
            if result == 0 then
                ZeroFlag = 1;
            if result < 0 then
                NegativeFlag = 1;
            PC = PC + 2;
        };

        instruction sub = { 0100, reg as dest, reg as src1, reg as src2 } {
            let result = (src1 - src2) & 0xFFFFFFFF;
            dest = result;
            if result == 0 then
                ZeroFlag = 1;
            if result < 0 then
                NegativeFlag = 1;
            PC = PC + 2;
        };

        instruction mul = { 0000 0101 0000, reg as dest, reg as src1, reg as src2 } {
            let result = (src1 * src2) & 0xFFFFFFFF;
            dest = result;
            if result == 0 then
                ZeroFlag = 1;
            if result < 0 then
                NegativeFlag = 1;
            PC = PC + 3;
        };

        instruction div = { 0000 0110 0000, reg as dest, reg as src1, reg as src2 } {
            let result = (src1 / src2) & 0xFFFFFFFF;
            dest = result;
            if result == 0 then
                ZeroFlag = 1;
            if result < 0 then
                NegativeFlag = 1;
            PC = PC + 3;
        };

        instruction mod = { 0000 0110 0001, reg as dest, reg as src1, reg as src2 } {
            let result = (src1 % src2) & 0xFFFFFFFF;
            dest = result;
            if result == 0 then
                ZeroFlag = 1;
            if result < 0 then
                NegativeFlag = 1;
            PC = PC + 3;
        };

        instruction subi = { 1100, reg as dest, reg as src1, 0000, imm32 as value } {
            let result = src1 - value;
            dest = result;
            if result == 0 then
                ZeroFlag = 1;
            if result < 0 then
                NegativeFlag = 1;
            PC = PC + 6;
        };

        instruction jmp = { 0101 0000, imm32 as address } {
            PC = address;
        };

        instruction je = { 0110 0000, imm32 as address } {
            if ZeroFlag then PC = address;
            else PC = PC + 5;
        };

        instruction jne = { 0111 0000, imm32 as address } {
            if (!ZeroFlag) then PC = address;
            else PC = PC + 5;
        };

        instruction jl = {1000 0000, imm32 as address } {
            if NegativeFlag == 1 then
                PC = address;
            else
                PC = PC + 5;
        };
        
        instruction jle = { 1001 0000, imm32 as address } {
            if (ZeroFlag == 1 || NegativeFlag == 1) then
                PC = address;
            else
                PC = PC + 5;
        };

        instruction jg = { 1010 0000, imm32 as address } {
            if (NegativeFlag == 0) then
                PC = address;
            else
                PC = PC + 5;
        };
        
        instruction jge = {1011 0000, imm32 as address } {
            if (ZeroFlag == 1 || NegativeFlag == 0) then
                PC = address;
            else
                PC = PC + 5;
        };

        instruction push = { 1000 1111, reg as src, 0000 } {
            sp = sp - 4;
            data_bank:4[sp] = src;
            PC = PC + 2;
        };

        instruction cmp = { 1001 0010 , reg as src1, reg as src2} {
            let result = src1 - src2;
            if (result == 0) then
                ZeroFlag = 1;
            else
                ZeroFlag = 0;

            if (result < 0) then
                NegativeFlag = 1;
            else
                NegativeFlag = 0;
            PC = PC + 2;
        };

        instruction pop = { 1101, reg as dest} {
            dest = data_bank:4[sp];
            sp = sp + 4;
            PC = PC + 1;
        };

        instruction in = {  0000 1110 0100, reg as dest } {
            dest = iv;
            PC = PC + 2;
        };

        instruction out = { 111 1, reg as src } {
            ov = src;
            PC = PC + 1;
        };

        instruction call = { 0000 1100, imm32 as address } {
            sp = sp - 4;
            data_bank:4[sp] = PC + 5;

            PC = address;
        };

        instruction ret = { 0010 1111 } {
            let return_address = data_bank:4[sp];
            sp = sp + 4;

            PC = return_address;
        };

        instruction hlt = { 0001 1010 } {
            
        };

    mnemonics:
        format reg_only is "{1}";
        format reg_imm is "{1}, {2}";
        format reg_reg is "{1}, {2}";
        format reg_label is "{1}, [{2}]";
        format reg_reg_reg is "{1}, {2}, {3}";
        format reg_reg_imm is "{1}, {2}, {3}";
        format reg_reg_off_plus is "{1}, [{2} + {3}]";
        format reg_reg_off_minus is "{1}, [{2} - {3}]";

        format imm_only is "{1}";

        mnemonic nop();
        mnemonic in(dest) reg_only;
        mnemonic out(src) reg_only;

        mnemonic load(dest, src) reg_label when r_data,
                     (dest, src) "{1}, const[{2}]" when r_const;

        mnemonic load for load_reg(dest, src) reg_label when r_data,
                                  (dest, src) "{1}, const[{2}]" when r_const;

        mnemonic load for load_label_off(dest, src, off) reg_reg_off_plus when r_data,
                                        (dest, src, off) "{1}, const[{2} + {3}]" when r_const;

        mnemonic load for load_off_plus(dest, src, off) reg_reg_off_plus when r_data,
                                        (dest, src, off) "{1}, const[{2} + {3}]" when r_const;
        mnemonic load for load_off_minus(dest, src, off) reg_reg_off_minus when r_data,
                                        (dest, src, off) "{1}, const[{2} - {3}]" when r_const;
        
        mnemonic load8(dest, src, off) reg_reg_off_plus when r_data,
                                        (dest, src, off) "{1}, const[{2} + {3}]" when r_const;
        mnemonic load32(dest, src, off) reg_reg_off_plus when r_data,
                                        (dest, src, off) "{1}, const[{2} + {3}]" when r_const;

        mnemonic store(src, dest) reg_label;
        mnemonic store for store_off_plus(src, dest, off) reg_reg_off_plus;
        mnemonic store for store_off_minus(src, dest, off) reg_reg_off_minus;

        mnemonic store8(src, dest, off) reg_reg_off_plus;
        mnemonic store32(src, dest, off) reg_reg_off_plus;
                                          
        mnemonic mov(dest, src) reg_reg;
        mnemonic movi(src, imm) reg_imm;
        mnemonic imov(dest, offset1) reg_imm;
        mnemonic add(dest, src1, src2) reg_reg_reg;
        mnemonic sub(dest, src1, src2) reg_reg_reg;
        mnemonic mul(dest, src1, src2) reg_reg_reg;
        mnemonic div(dest, src1, src2) reg_reg_reg;
        mnemonic mod(dest, src1, src2) reg_reg_reg;
        mnemonic subi(dest, src1, value) reg_reg_imm;
        mnemonic jmp(address) imm_only;
        mnemonic je(address) imm_only;
        mnemonic jne(address) imm_only;
        mnemonic jl(address) imm_only;
        mnemonic jle(address) imm_only;
        mnemonic jg(address) imm_only;
        mnemonic jge(address) imm_only;
        mnemonic cmp(src1, src2) reg_reg;
        mnemonic push(src) reg_only;
        mnemonic pop(dest) reg_only;
        mnemonic call(address) imm_only;
        mnemonic ret();
        mnemonic hlt();
}