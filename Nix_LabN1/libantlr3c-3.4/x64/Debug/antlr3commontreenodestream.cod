; Listing generated by Microsoft (R) Optimizing Compiler Version 19.42.34435.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	antlr3CommonTreeNodeStreamNewTree
PUBLIC	antlr3CommonTreeNodeStreamNew
PUBLIC	antlr3CommonTreeNodeStreamNewStream
PUBLIC	antlr3TreeNodeStreamNew
PUBLIC	??_C@_02NAHCJHOC@UP@				; `string'
PUBLIC	??_C@_04FANAOELO@DOWN@				; `string'
PUBLIC	??_C@_03KPJEKKJC@EOF@				; `string'
PUBLIC	??_C@_07DNODLGKM@INVALID@			; `string'
EXTRN	__imp_calloc:PROC
EXTRN	__imp_free:PROC
EXTRN	antlr3VectorNew:PROC
EXTRN	antlr3StackNew:PROC
EXTRN	antlr3IntStreamNew:PROC
EXTRN	antlr3CommonTokenNew:PROC
EXTRN	ANTLR3_TREE_ADAPTORNew:PROC
EXTRN	antlr3CommonTreeNewFromToken:PROC
EXTRN	antlr3SetCTAPI:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3CommonTreeNodeStreamNewTree DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$antlr3CommonTreeNodeStreamNewTree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3CommonTreeNodeStreamNew DD imagerel $LN8
	DD	imagerel $LN8+1389
	DD	imagerel $unwind$antlr3CommonTreeNodeStreamNew
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3CommonTreeNodeStreamNewStream DD imagerel $LN6
	DD	imagerel $LN6+1233
	DD	imagerel $unwind$antlr3CommonTreeNodeStreamNewStream
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3TreeNodeStreamNew DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$antlr3TreeNodeStreamNew
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$addNavigationNode DD imagerel addNavigationNode
	DD	imagerel addNavigationNode+201
	DD	imagerel $unwind$addNavigationNode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$hasUniqueNavigationNodes DD imagerel hasUniqueNavigationNodes
	DD	imagerel hasUniqueNavigationNodes+20
	DD	imagerel $unwind$hasUniqueNavigationNodes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newDownNode DD imagerel newDownNode
	DD	imagerel newDownNode+83
	DD	imagerel $unwind$newDownNode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newUpNode DD imagerel newUpNode
	DD	imagerel newUpNode+83
	DD	imagerel $unwind$newUpNode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$reset DD	imagerel reset
	DD	imagerel reset+147
	DD	imagerel $unwind$reset
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$push DD	imagerel push
	DD	imagerel push+123
	DD	imagerel $unwind$push
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pop DD	imagerel pop
	DD	imagerel pop+98
	DD	imagerel $unwind$pop
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getLookaheadSize DD imagerel getLookaheadSize
	DD	imagerel getLookaheadSize+110
	DD	imagerel $unwind$getLookaheadSize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getTreeAdaptor DD imagerel getTreeAdaptor
	DD	imagerel getTreeAdaptor+23
	DD	imagerel $unwind$getTreeAdaptor
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getTreeSource DD imagerel getTreeSource
	DD	imagerel getTreeSource+23
	DD	imagerel $unwind$getTreeSource
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LT DD	imagerel _LT
	DD	imagerel _LT+237
	DD	imagerel $unwind$_LT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get DD	imagerel get
	DD	imagerel get+101
	DD	imagerel $unwind$get
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setUniqueNavigationNodes DD imagerel setUniqueNavigationNodes
	DD	imagerel setUniqueNavigationNodes+31
	DD	imagerel $unwind$setUniqueNavigationNodes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$toString DD imagerel toString
	DD	imagerel toString+47
	DD	imagerel $unwind$toString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$toStringSS DD imagerel toStringSS
	DD	imagerel toStringSS+101
	DD	imagerel $unwind$toStringSS
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$toStringWork DD imagerel toStringWork
	DD	imagerel toStringWork+452
	DD	imagerel $unwind$toStringWork
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$replaceChildren DD imagerel replaceChildren
	DD	imagerel replaceChildren+112
	DD	imagerel $unwind$replaceChildren
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$consume DD imagerel consume
	DD	imagerel consume+92
	DD	imagerel $unwind$consume
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tindex DD imagerel tindex
	DD	imagerel tindex+53
	DD	imagerel $unwind$tindex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LA DD	imagerel _LA
	DD	imagerel _LA+84
	DD	imagerel $unwind$_LA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mark DD	imagerel mark
	DD	imagerel mark+147
	DD	imagerel $unwind$mark
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$release DD imagerel release
	DD	imagerel release+13
	DD	imagerel $unwind$release
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$rewindMark DD imagerel rewindMark
	DD	imagerel rewindMark+40
	DD	imagerel $unwind$rewindMark
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$rewindLast DD imagerel rewindLast
	DD	imagerel rewindLast+39
	DD	imagerel $unwind$rewindLast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$seek DD	imagerel seek
	DD	imagerel seek+61
	DD	imagerel $unwind$seek
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$size DD	imagerel size
	DD	imagerel size+98
	DD	imagerel $unwind$size
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fillBuffer DD imagerel fillBuffer
	DD	imagerel fillBuffer+287
	DD	imagerel $unwind$fillBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fillBufferRoot DD imagerel fillBufferRoot
	DD	imagerel fillBufferRoot+53
	DD	imagerel $unwind$fillBufferRoot
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3TreeNodeStreamFree DD imagerel antlr3TreeNodeStreamFree
	DD	imagerel antlr3TreeNodeStreamFree+28
	DD	imagerel $unwind$antlr3TreeNodeStreamFree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3CommonTreeNodeStreamFree DD imagerel antlr3CommonTreeNodeStreamFree
	DD	imagerel antlr3CommonTreeNodeStreamFree+298
	DD	imagerel $unwind$antlr3CommonTreeNodeStreamFree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$LB DD	imagerel LB
	DD	imagerel LB+151
	DD	imagerel $unwind$LB
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_07DNODLGKM@INVALID@
CONST	SEGMENT
??_C@_07DNODLGKM@INVALID@ DB 'INVALID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KPJEKKJC@EOF@
CONST	SEGMENT
??_C@_03KPJEKKJC@EOF@ DB 'EOF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FANAOELO@DOWN@
CONST	SEGMENT
??_C@_04FANAOELO@DOWN@ DB 'DOWN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NAHCJHOC@UP@
CONST	SEGMENT
??_C@_02NAHCJHOC@UP@ DB 'UP', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LB DD	020e01H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3CommonTreeNodeStreamFree DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3TreeNodeStreamFree DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fillBufferRoot DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fillBuffer DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$size DD	020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$seek DD	020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rewindLast DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rewindMark DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$release DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mark DD	020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LA DD	020e01H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tindex DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$consume DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$replaceChildren DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$toStringWork DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$toStringSS DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$toString DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setUniqueNavigationNodes DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get DD	020e01H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LT DD	020e01H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getTreeSource DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getTreeAdaptor DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getLookaheadSize DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pop DD	020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$push DD	020e01H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reset DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newUpNode DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newDownNode DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$hasUniqueNavigationNodes DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$addNavigationNode DD 020e01H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3TreeNodeStreamNew DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3CommonTreeNodeStreamNewStream DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3CommonTreeNodeStreamNew DD 020e01H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3CommonTreeNodeStreamNewTree DD 020e01H
	DD	0700a520eH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT LB
_TEXT	SEGMENT
tv84 = 32
tns$ = 64
k$ = 72
LB	PROC						; COMDAT

; 552  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 553  : 	if	( k==0)

  0000e	83 7c 24 48 00	 cmp	 DWORD PTR k$[rsp], 0
  00013	75 10		 jne	 SHORT $LN2@LB

; 554  : 	{
; 555  : 		return	&(tns->ctns->INVALID_NODE.baseTree);

  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  0001a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001d	48 05 f8 03 00
	00		 add	 rax, 1016		; 000003f8H
  00023	eb 6c		 jmp	 SHORT $LN1@LB
$LN2@LB:

; 556  : 	}
; 557  : 
; 558  : 	if	( (tns->ctns->p - k) < 0)

  00025	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  0002a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002d	8b 4c 24 48	 mov	 ecx, DWORD PTR k$[rsp]
  00031	8b 80 20 05 00
	00		 mov	 eax, DWORD PTR [rax+1312]
  00037	2b c1		 sub	 eax, ecx
  00039	85 c0		 test	 eax, eax
  0003b	7d 10		 jge	 SHORT $LN3@LB

; 559  : 	{
; 560  : 		return	&(tns->ctns->INVALID_NODE.baseTree);

  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 05 f8 03 00
	00		 add	 rax, 1016		; 000003f8H
  0004b	eb 44		 jmp	 SHORT $LN1@LB
$LN3@LB:

; 561  : 	}
; 562  : 
; 563  : 	return tns->ctns->nodes->get(tns->ctns->nodes, tns->ctns->p - k);

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	8b 4c 24 48	 mov	 ecx, DWORD PTR k$[rsp]
  00059	8b 80 20 05 00
	00		 mov	 eax, DWORD PTR [rax+1312]
  0005f	2b c1		 sub	 eax, ecx
  00061	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tns$[rsp]
  00066	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00069	48 8b 54 24 40	 mov	 rdx, QWORD PTR tns$[rsp]
  0006e	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00071	48 8b 92 f8 04
	00 00		 mov	 rdx, QWORD PTR [rdx+1272]
  00078	48 89 54 24 20	 mov	 QWORD PTR tv84[rsp], rdx
  0007d	8b d0		 mov	 edx, eax
  0007f	48 8b 89 f8 04
	00 00		 mov	 rcx, QWORD PTR [rcx+1272]
  00086	48 8b 44 24 20	 mov	 rax, QWORD PTR tv84[rsp]
  0008b	ff 90 28 01 00
	00		 call	 QWORD PTR [rax+296]
$LN1@LB:

; 564  : }

  00091	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00095	5f		 pop	 rdi
  00096	c3		 ret	 0
LB	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT antlr3CommonTreeNodeStreamFree
_TEXT	SEGMENT
tv135 = 32
ctns$ = 64
antlr3CommonTreeNodeStreamFree PROC			; COMDAT

; 421  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 422  : 
; 423  : 	// If this is a rewrting stream, then certain resources
; 424  : 	// belong to the originating node stream and we do not
; 425  : 	// free them here.
; 426  : 	//
; 427  : 	if	(ctns->isRewriter != ANTLR3_TRUE)

  0000a	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  0000f	0f b6 80 e8 05
	00 00		 movzx	 eax, BYTE PTR [rax+1512]
  00016	83 f8 01	 cmp	 eax, 1
  00019	0f 84 8f 00 00
	00		 je	 $LN2@antlr3Comm

; 428  : 	{
; 429  : 		ctns->adaptor			->free  (ctns->adaptor);

  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00024	48 8b 80 10 05
	00 00		 mov	 rax, QWORD PTR [rax+1296]
  0002b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  00030	48 8b 89 10 05
	00 00		 mov	 rcx, QWORD PTR [rcx+1296]
  00037	ff 90 50 01 00
	00		 call	 QWORD PTR [rax+336]

; 430  : 
; 431  : 		if	(ctns->nodeStack != NULL)

  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00042	48 83 b8 18 05
	00 00 00	 cmp	 QWORD PTR [rax+1304], 0
  0004a	74 1c		 je	 SHORT $LN3@antlr3Comm

; 432  : 		{
; 433  : 			ctns->nodeStack->free(ctns->nodeStack);

  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00051	48 8b 80 18 05
	00 00		 mov	 rax, QWORD PTR [rax+1304]
  00058	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  0005d	48 8b 89 18 05
	00 00		 mov	 rcx, QWORD PTR [rcx+1304]
  00064	ff 50 10	 call	 QWORD PTR [rax+16]
  00067	90		 npad	 1
$LN3@antlr3Comm:

; 434  : 		}
; 435  : 
; 436  : 		ANTLR3_FREE(ctns->INVALID_NODE.token);

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  0006d	48 8b 88 d8 03
	00 00		 mov	 rcx, QWORD PTR [rax+984]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 437  : 		ANTLR3_FREE(ctns->EOF_NODE.token);

  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  0007f	48 8b 88 a0 02
	00 00		 mov	 rcx, QWORD PTR [rax+672]
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 438  : 		ANTLR3_FREE(ctns->DOWN.token);

  0008c	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00091	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 439  : 		ANTLR3_FREE(ctns->UP.token);

  0009b	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  000a0	48 8b 88 68 01
	00 00		 mov	 rcx, QWORD PTR [rax+360]
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  000ad	90		 npad	 1
$LN2@antlr3Comm:

; 440  : 	}
; 441  : 	
; 442  : 	if	(ctns->nodes != NULL)

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  000b3	48 83 b8 f8 04
	00 00 00	 cmp	 QWORD PTR [rax+1272], 0
  000bb	74 1f		 je	 SHORT $LN4@antlr3Comm

; 443  : 	{
; 444  : 		ctns->nodes			->free  (ctns->nodes);

  000bd	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  000c2	48 8b 80 f8 04
	00 00		 mov	 rax, QWORD PTR [rax+1272]
  000c9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  000ce	48 8b 89 f8 04
	00 00		 mov	 rcx, QWORD PTR [rcx+1272]
  000d5	ff 90 18 01 00
	00		 call	 QWORD PTR [rax+280]
  000db	90		 npad	 1
$LN4@antlr3Comm:

; 445  : 	}
; 446  : 	ctns->tnstream->istream ->free  (ctns->tnstream->istream);

  000dc	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  000e1	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  000ea	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000ee	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000f2	48 89 4c 24 20	 mov	 QWORD PTR tv135[rsp], rcx
  000f7	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000fb	48 8b 44 24 20	 mov	 rax, QWORD PTR tv135[rsp]
  00100	ff 50 78	 call	 QWORD PTR [rax+120]

; 447  :     ctns->tnstream			->free  (ctns->tnstream);

  00103	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00108	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0010c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  00111	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00115	ff 50 48	 call	 QWORD PTR [rax+72]

; 448  : 
; 449  : 
; 450  :     ANTLR3_FREE(ctns);

  00118	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00123	90		 npad	 1

; 451  : }

  00124	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00128	5f		 pop	 rdi
  00129	c3		 ret	 0
antlr3CommonTreeNodeStreamFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT antlr3TreeNodeStreamFree
_TEXT	SEGMENT
stream$ = 48
antlr3TreeNodeStreamFree PROC				; COMDAT

; 111  : {   

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 112  :     ANTLR3_FREE(stream);

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR stream$[rsp]
  0000f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00015	90		 npad	 1

; 113  : }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5f		 pop	 rdi
  0001b	c3		 ret	 0
antlr3TreeNodeStreamFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT fillBufferRoot
_TEXT	SEGMENT
ctns$ = 48
fillBufferRoot PROC					; COMDAT

; 461  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 462  : 	// Call the generic buffer routine with the root as the
; 463  : 	// argument
; 464  : 	//
; 465  : 	fillBuffer(ctns, ctns->root);

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR ctns$[rsp]
  0000f	48 8b 90 08 05
	00 00		 mov	 rdx, QWORD PTR [rax+1288]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ctns$[rsp]
  0001b	e8 00 00 00 00	 call	 fillBuffer

; 466  : 	ctns->p = 0;					// Indicate we are at buffer start

  00020	48 8b 44 24 30	 mov	 rax, QWORD PTR ctns$[rsp]
  00025	c7 80 20 05 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+1312], 0

; 467  : }

  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
fillBufferRoot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT fillBuffer
_TEXT	SEGMENT
nilNode$ = 32
nCount$ = 36
c$ = 40
ctns$ = 64
t$ = 72
fillBuffer PROC						; COMDAT

; 475  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 476  : 	ANTLR3_BOOLEAN	nilNode;
; 477  : 	ANTLR3_UINT32	nCount;
; 478  : 	ANTLR3_UINT32	c;
; 479  : 
; 480  : 	nilNode = ctns->adaptor->isNilNode(ctns->adaptor, t);

  0000f	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00014	48 8b 80 10 05
	00 00		 mov	 rax, QWORD PTR [rax+1296]
  0001b	48 8b 54 24 48	 mov	 rdx, QWORD PTR t$[rsp]
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  00025	48 8b 89 10 05
	00 00		 mov	 rcx, QWORD PTR [rcx+1296]
  0002c	ff 50 60	 call	 QWORD PTR [rax+96]
  0002f	88 44 24 20	 mov	 BYTE PTR nilNode$[rsp], al

; 481  : 
; 482  : 	// If the supplied node is not a nil (list) node then we
; 483  : 	// add in the node itself to the vector
; 484  : 	//
; 485  : 	if	(nilNode == ANTLR3_FALSE)

  00033	0f b6 44 24 20	 movzx	 eax, BYTE PTR nilNode$[rsp]
  00038	85 c0		 test	 eax, eax
  0003a	75 27		 jne	 SHORT $LN5@fillBuffer

; 486  : 	{
; 487  : 		ctns->nodes->add(ctns->nodes, t, NULL);	

  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00041	48 8b 80 f8 04
	00 00		 mov	 rax, QWORD PTR [rax+1272]
  00048	45 33 c0	 xor	 r8d, r8d
  0004b	48 8b 54 24 48	 mov	 rdx, QWORD PTR t$[rsp]
  00050	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  00055	48 8b 89 f8 04
	00 00		 mov	 rcx, QWORD PTR [rcx+1272]
  0005c	ff 90 48 01 00
	00		 call	 QWORD PTR [rax+328]
  00062	90		 npad	 1
$LN5@fillBuffer:

; 488  : 	}
; 489  : 
; 490  : 	// Only add a DOWN node if the tree is not a nil tree and
; 491  : 	// the tree does have children.
; 492  : 	//
; 493  : 	nCount = t->getChildCount(t);

  00063	48 8b 4c 24 48	 mov	 rcx, QWORD PTR t$[rsp]
  00068	48 8b 44 24 48	 mov	 rax, QWORD PTR t$[rsp]
  0006d	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00073	89 44 24 24	 mov	 DWORD PTR nCount$[rsp], eax

; 494  : 
; 495  : 	if	(nilNode == ANTLR3_FALSE && nCount>0)

  00077	0f b6 44 24 20	 movzx	 eax, BYTE PTR nilNode$[rsp]
  0007c	85 c0		 test	 eax, eax
  0007e	75 1d		 jne	 SHORT $LN6@fillBuffer
  00080	83 7c 24 24 00	 cmp	 DWORD PTR nCount$[rsp], 0
  00085	76 16		 jbe	 SHORT $LN6@fillBuffer

; 496  : 	{
; 497  : 		ctns->addNavigationNode(ctns, ANTLR3_TOKEN_DOWN);

  00087	ba 02 00 00 00	 mov	 edx, 2
  0008c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  00091	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00096	ff 90 98 05 00
	00		 call	 QWORD PTR [rax+1432]
  0009c	90		 npad	 1
$LN6@fillBuffer:

; 498  : 	}
; 499  : 
; 500  : 	// We always add any children the tree contains, which is
; 501  : 	// a recursive call to this function, which will cause similar
; 502  : 	// recursion and implement a depth first addition
; 503  : 	//
; 504  : 	for	(c = 0; c < nCount; c++)

  0009d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR c$[rsp], 0
  000a5	eb 0a		 jmp	 SHORT $LN4@fillBuffer
$LN2@fillBuffer:
  000a7	8b 44 24 28	 mov	 eax, DWORD PTR c$[rsp]
  000ab	ff c0		 inc	 eax
  000ad	89 44 24 28	 mov	 DWORD PTR c$[rsp], eax
$LN4@fillBuffer:
  000b1	8b 44 24 24	 mov	 eax, DWORD PTR nCount$[rsp]
  000b5	39 44 24 28	 cmp	 DWORD PTR c$[rsp], eax
  000b9	73 38		 jae	 SHORT $LN3@fillBuffer

; 505  : 	{
; 506  : 		fillBuffer(ctns, ctns->adaptor->getChild(ctns->adaptor, t, c));

  000bb	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  000c0	48 8b 80 10 05
	00 00		 mov	 rax, QWORD PTR [rax+1296]
  000c7	44 8b 44 24 28	 mov	 r8d, DWORD PTR c$[rsp]
  000cc	48 8b 54 24 48	 mov	 rdx, QWORD PTR t$[rsp]
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  000d6	48 8b 89 10 05
	00 00		 mov	 rcx, QWORD PTR [rcx+1296]
  000dd	ff 90 d0 00 00
	00		 call	 QWORD PTR [rax+208]
  000e3	48 8b d0	 mov	 rdx, rax
  000e6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  000eb	e8 00 00 00 00	 call	 fillBuffer
  000f0	90		 npad	 1

; 507  : 	}

  000f1	eb b4		 jmp	 SHORT $LN2@fillBuffer
$LN3@fillBuffer:

; 508  : 
; 509  : 	// If the tree had children and was not a nil (list) node, then we
; 510  : 	// we need to add an UP node here to match the DOWN node
; 511  : 	//
; 512  : 	if	(nilNode == ANTLR3_FALSE && nCount > 0)

  000f3	0f b6 44 24 20	 movzx	 eax, BYTE PTR nilNode$[rsp]
  000f8	85 c0		 test	 eax, eax
  000fa	75 1d		 jne	 SHORT $LN7@fillBuffer
  000fc	83 7c 24 24 00	 cmp	 DWORD PTR nCount$[rsp], 0
  00101	76 16		 jbe	 SHORT $LN7@fillBuffer

; 513  : 	{
; 514  : 		ctns->addNavigationNode(ctns, ANTLR3_TOKEN_UP);

  00103	ba 03 00 00 00	 mov	 edx, 3
  00108	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  0010d	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00112	ff 90 98 05 00
	00		 call	 QWORD PTR [rax+1432]
  00118	90		 npad	 1
$LN7@fillBuffer:

; 515  : 	}
; 516  : }

  00119	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0011d	5f		 pop	 rdi
  0011e	c3		 ret	 0
fillBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT size
_TEXT	SEGMENT
tns$ = 32
ctns$ = 40
is$ = 64
size	PROC						; COMDAT

; 732  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 733  :     pANTLR3_TREE_NODE_STREAM		tns;
; 734  :     pANTLR3_COMMON_TREE_NODE_STREAM	ctns;
; 735  : 
; 736  :     tns	    = (pANTLR3_TREE_NODE_STREAM)(is->super);

  0000a	48 8b 44 24 40	 mov	 rax, QWORD PTR is$[rsp]
  0000f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00013	48 89 44 24 20	 mov	 QWORD PTR tns$[rsp], rax

; 737  :     ctns    = tns->ctns;

  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR tns$[rsp]
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 89 44 24 28	 mov	 QWORD PTR ctns$[rsp], rax

; 738  : 
; 739  : 	if	(ctns->p == -1)

  00025	48 8b 44 24 28	 mov	 rax, QWORD PTR ctns$[rsp]
  0002a	83 b8 20 05 00
	00 ff		 cmp	 DWORD PTR [rax+1312], -1
  00031	75 0b		 jne	 SHORT $LN2@size

; 740  : 	{
; 741  : 		fillBufferRoot(ctns);

  00033	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ctns$[rsp]
  00038	e8 00 00 00 00	 call	 fillBufferRoot
  0003d	90		 npad	 1
$LN2@size:

; 742  : 	}
; 743  : 
; 744  : 	return ctns->nodes->size(ctns->nodes);

  0003e	48 8b 44 24 28	 mov	 rax, QWORD PTR ctns$[rsp]
  00043	48 8b 80 f8 04
	00 00		 mov	 rax, QWORD PTR [rax+1272]
  0004a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ctns$[rsp]
  0004f	48 8b 89 f8 04
	00 00		 mov	 rcx, QWORD PTR [rcx+1272]
  00056	ff 90 58 01 00
	00		 call	 QWORD PTR [rax+344]

; 745  : }

  0005c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
size	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT seek
_TEXT	SEGMENT
tns$ = 0
ctns$ = 8
is$ = 32
index$ = 40
seek	PROC						; COMDAT

; 704  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16

; 705  :     pANTLR3_TREE_NODE_STREAM		tns;
; 706  :     pANTLR3_COMMON_TREE_NODE_STREAM	ctns;
; 707  : 
; 708  :     tns	    = (pANTLR3_TREE_NODE_STREAM)(is->super);

  0000f	48 8b 44 24 20	 mov	 rax, QWORD PTR is$[rsp]
  00014	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00018	48 89 04 24	 mov	 QWORD PTR tns$[rsp], rax

; 709  :     ctns    = tns->ctns;

  0001c	48 8b 04 24	 mov	 rax, QWORD PTR tns$[rsp]
  00020	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00023	48 89 44 24 08	 mov	 QWORD PTR ctns$[rsp], rax

; 710  : 
; 711  : 	ctns->p = ANTLR3_UINT32_CAST(index);

  00028	48 8b 44 24 08	 mov	 rax, QWORD PTR ctns$[rsp]
  0002d	8b 4c 24 28	 mov	 ecx, DWORD PTR index$[rsp]
  00031	89 88 20 05 00
	00		 mov	 DWORD PTR [rax+1312], ecx

; 712  : }

  00037	48 83 c4 10	 add	 rsp, 16
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
seek	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT rewindLast
_TEXT	SEGMENT
is$ = 48
rewindLast PROC						; COMDAT

; 695  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 696  :    is->seek(is, is->lastMarker);

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR is$[rsp]
  0000f	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR is$[rsp]
  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR is$[rsp]
  0001d	ff 50 60	 call	 QWORD PTR [rax+96]
  00020	90		 npad	 1

; 697  : }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
rewindLast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT rewindMark
_TEXT	SEGMENT
is$ = 48
marker$ = 56
rewindMark PROC						; COMDAT

; 689  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 690  : 	is->seek(is, marker);

  0000f	48 8b 54 24 38	 mov	 rdx, QWORD PTR marker$[rsp]
  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR is$[rsp]
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR is$[rsp]
  0001e	ff 50 60	 call	 QWORD PTR [rax+96]
  00021	90		 npad	 1

; 691  : }

  00022	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00026	5f		 pop	 rdi
  00027	c3		 ret	 0
rewindMark ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT release
_TEXT	SEGMENT
is$ = 16
marker$ = 24
release	PROC						; COMDAT

; 678  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 679  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
release	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT mark
_TEXT	SEGMENT
tns$ = 32
ctns$ = 40
tv88 = 48
is$ = 80
mark	PROC						; COMDAT

; 657  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 658  : 	pANTLR3_TREE_NODE_STREAM		tns;
; 659  : 	pANTLR3_COMMON_TREE_NODE_STREAM	ctns;
; 660  : 
; 661  : 	tns	    = (pANTLR3_TREE_NODE_STREAM)(is->super);

  0000a	48 8b 44 24 50	 mov	 rax, QWORD PTR is$[rsp]
  0000f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00013	48 89 44 24 20	 mov	 QWORD PTR tns$[rsp], rax

; 662  : 	ctns    = tns->ctns;

  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR tns$[rsp]
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 89 44 24 28	 mov	 QWORD PTR ctns$[rsp], rax

; 663  : 
; 664  : 	if	(tns->ctns->p == -1)

  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR tns$[rsp]
  0002a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002d	83 b8 20 05 00
	00 ff		 cmp	 DWORD PTR [rax+1312], -1
  00034	75 0e		 jne	 SHORT $LN2@mark

; 665  : 	{
; 666  : 		fillBufferRoot(tns->ctns);

  00036	48 8b 44 24 20	 mov	 rax, QWORD PTR tns$[rsp]
  0003b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003e	e8 00 00 00 00	 call	 fillBufferRoot
  00043	90		 npad	 1
$LN2@mark:

; 667  : 	}
; 668  : 
; 669  : 	// Return the current mark point
; 670  : 	//
; 671  : 	ctns->tnstream->istream->lastMarker = ctns->tnstream->istream->index(ctns->tnstream->istream);

  00044	48 8b 44 24 28	 mov	 rax, QWORD PTR ctns$[rsp]
  00049	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ctns$[rsp]
  00052	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 89 4c 24 30	 mov	 QWORD PTR tv88[rsp], rcx
  0005f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR tv88[rsp]
  00068	ff 50 40	 call	 QWORD PTR [rax+64]
  0006b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ctns$[rsp]
  00070	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00074	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00078	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 672  : 
; 673  : 	return ctns->tnstream->istream->lastMarker;

  0007c	48 8b 44 24 28	 mov	 rax, QWORD PTR ctns$[rsp]
  00081	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00085	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00089	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]

; 674  : }

  0008d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
mark	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT _LA
_TEXT	SEGMENT
tns$ = 32
t$ = 40
is$ = 64
i$ = 72
_LA	PROC						; COMDAT

; 632  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 633  : 	pANTLR3_TREE_NODE_STREAM		tns;
; 634  : 	pANTLR3_BASE_TREE				t;
; 635  : 
; 636  : 	tns	    = (pANTLR3_TREE_NODE_STREAM)(is->super);

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR is$[rsp]
  00013	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00017	48 89 44 24 20	 mov	 QWORD PTR tns$[rsp], rax

; 637  : 
; 638  : 	// Ask LT for the 'token' at that position
; 639  : 	//
; 640  : 	t = tns->_LT(tns, i);

  0001c	8b 54 24 48	 mov	 edx, DWORD PTR i$[rsp]
  00020	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tns$[rsp]
  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR tns$[rsp]
  0002a	ff 50 10	 call	 QWORD PTR [rax+16]
  0002d	48 89 44 24 28	 mov	 QWORD PTR t$[rsp], rax

; 641  : 
; 642  : 	if	(t == NULL)

  00032	48 83 7c 24 28
	00		 cmp	 QWORD PTR t$[rsp], 0
  00038	75 04		 jne	 SHORT $LN2@LA

; 643  : 	{
; 644  : 		return	ANTLR3_TOKEN_INVALID;

  0003a	33 c0		 xor	 eax, eax
  0003c	eb 10		 jmp	 SHORT $LN1@LA
$LN2@LA:

; 645  : 	}
; 646  : 
; 647  : 	// Token node was there so return the type of it
; 648  : 	//
; 649  : 	return  t->getType(t);

  0003e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  00043	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  00048	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]
$LN1@LA:

; 650  : }

  0004e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
_LA	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT tindex
_TEXT	SEGMENT
tns$ = 0
ctns$ = 8
is$ = 32
tindex	PROC						; COMDAT

; 716  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16

; 717  :     pANTLR3_TREE_NODE_STREAM		tns;
; 718  :     pANTLR3_COMMON_TREE_NODE_STREAM	ctns;
; 719  : 
; 720  :     tns	    = (pANTLR3_TREE_NODE_STREAM)(is->super);

  0000a	48 8b 44 24 20	 mov	 rax, QWORD PTR is$[rsp]
  0000f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00013	48 89 04 24	 mov	 QWORD PTR tns$[rsp], rax

; 721  :     ctns    = tns->ctns;

  00017	48 8b 04 24	 mov	 rax, QWORD PTR tns$[rsp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 89 44 24 08	 mov	 QWORD PTR ctns$[rsp], rax

; 722  : 
; 723  : 	return (ANTLR3_MARKER)(ctns->p);

  00023	48 8b 44 24 08	 mov	 rax, QWORD PTR ctns$[rsp]
  00028	48 63 80 20 05
	00 00		 movsxd	 rax, DWORD PTR [rax+1312]

; 724  : }

  0002f	48 83 c4 10	 add	 rsp, 16
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
tindex	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT consume
_TEXT	SEGMENT
tns$ = 32
ctns$ = 40
is$ = 64
consume	PROC						; COMDAT

; 616  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 617  :     pANTLR3_TREE_NODE_STREAM		tns;
; 618  :     pANTLR3_COMMON_TREE_NODE_STREAM	ctns;
; 619  : 
; 620  :     tns	    = (pANTLR3_TREE_NODE_STREAM)(is->super);

  0000a	48 8b 44 24 40	 mov	 rax, QWORD PTR is$[rsp]
  0000f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00013	48 89 44 24 20	 mov	 QWORD PTR tns$[rsp], rax

; 621  :     ctns    = tns->ctns;

  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR tns$[rsp]
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 89 44 24 28	 mov	 QWORD PTR ctns$[rsp], rax

; 622  : 
; 623  : 	if	(ctns->p == -1)

  00025	48 8b 44 24 28	 mov	 rax, QWORD PTR ctns$[rsp]
  0002a	83 b8 20 05 00
	00 ff		 cmp	 DWORD PTR [rax+1312], -1
  00031	75 0b		 jne	 SHORT $LN2@consume

; 624  : 	{
; 625  : 		fillBufferRoot(ctns);

  00033	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ctns$[rsp]
  00038	e8 00 00 00 00	 call	 fillBufferRoot
  0003d	90		 npad	 1
$LN2@consume:

; 626  : 	}
; 627  : 	ctns->p++;

  0003e	48 8b 44 24 28	 mov	 rax, QWORD PTR ctns$[rsp]
  00043	8b 80 20 05 00
	00		 mov	 eax, DWORD PTR [rax+1312]
  00049	ff c0		 inc	 eax
  0004b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ctns$[rsp]
  00050	89 81 20 05 00
	00		 mov	 DWORD PTR [rcx+1312], eax

; 628  : }

  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
consume	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT replaceChildren
_TEXT	SEGMENT
adaptor$1 = 48
cta$2 = 56
tns$ = 80
parent$ = 88
startChildIndex$ = 96
stopChildIndex$ = 104
t$ = 112
replaceChildren PROC					; COMDAT

; 929  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 930  : 	if	(parent != NULL)

  00019	48 83 7c 24 58
	00		 cmp	 QWORD PTR parent$[rsp], 0
  0001f	74 49		 je	 SHORT $LN2@replaceChi

; 931  : 	{
; 932  : 		pANTLR3_BASE_TREE_ADAPTOR	adaptor;
; 933  : 		pANTLR3_COMMON_TREE_ADAPTOR	cta;
; 934  : 
; 935  : 		adaptor	= tns->getTreeAdaptor(tns);

  00021	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tns$[rsp]
  00026	48 8b 44 24 50	 mov	 rax, QWORD PTR tns$[rsp]
  0002b	ff 50 20	 call	 QWORD PTR [rax+32]
  0002e	48 89 44 24 30	 mov	 QWORD PTR adaptor$1[rsp], rax

; 936  : 		cta		= (pANTLR3_COMMON_TREE_ADAPTOR)(adaptor->super);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR adaptor$1[rsp]
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	48 89 44 24 38	 mov	 QWORD PTR cta$2[rsp], rax

; 937  : 
; 938  : 		adaptor->replaceChildren(adaptor, parent, startChildIndex, stopChildIndex, t);

  00040	48 8b 44 24 70	 mov	 rax, QWORD PTR t$[rsp]
  00045	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004a	44 8b 4c 24 68	 mov	 r9d, DWORD PTR stopChildIndex$[rsp]
  0004f	44 8b 44 24 60	 mov	 r8d, DWORD PTR startChildIndex$[rsp]
  00054	48 8b 54 24 58	 mov	 rdx, QWORD PTR parent$[rsp]
  00059	48 8b 4c 24 30	 mov	 rcx, QWORD PTR adaptor$1[rsp]
  0005e	48 8b 44 24 30	 mov	 rax, QWORD PTR adaptor$1[rsp]
  00063	ff 90 48 01 00
	00		 call	 QWORD PTR [rax+328]
  00069	90		 npad	 1
$LN2@replaceChi:

; 939  : 	}
; 940  : }

  0006a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
replaceChildren ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT toStringWork
_TEXT	SEGMENT
n$ = 32
c$ = 36
text$1 = 40
child$2 = 48
tv161 = 56
tns$ = 80
p$ = 88
stop$ = 96
buf$ = 104
toStringWork PROC					; COMDAT

; 831  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 832  : 
; 833  : 	ANTLR3_UINT32   n;
; 834  : 	ANTLR3_UINT32   c;
; 835  : 
; 836  : 	if	(!p->isNilNode(p) )

  00019	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$[rsp]
  0001e	48 8b 44 24 58	 mov	 rax, QWORD PTR p$[rsp]
  00023	ff 90 c0 00 00
	00		 call	 QWORD PTR [rax+192]
  00029	0f b6 c0	 movzx	 eax, al
  0002c	85 c0		 test	 eax, eax
  0002e	0f 85 8c 00 00
	00		 jne	 $LN5@toStringWo

; 837  : 	{
; 838  : 		pANTLR3_STRING	text;
; 839  : 
; 840  : 		text	= p->toString(p);

  00034	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$[rsp]
  00039	48 8b 44 24 58	 mov	 rax, QWORD PTR p$[rsp]
  0003e	ff 90 d8 00 00
	00		 call	 QWORD PTR [rax+216]
  00044	48 89 44 24 28	 mov	 QWORD PTR text$1[rsp], rax

; 841  : 
; 842  : 		if  (text == NULL)

  00049	48 83 7c 24 28
	00		 cmp	 QWORD PTR text$1[rsp], 0
  0004f	75 5c		 jne	 SHORT $LN6@toStringWo

; 843  : 		{
; 844  : 			text = tns->ctns->stringFactory->newRaw(tns->ctns->stringFactory);

  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR tns$[rsp]
  00056	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00059	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tns$[rsp]
  0005e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00061	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00065	48 89 4c 24 38	 mov	 QWORD PTR tv161[rsp], rcx
  0006a	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0006e	48 8b 44 24 38	 mov	 rax, QWORD PTR tv161[rsp]
  00073	ff 50 10	 call	 QWORD PTR [rax+16]
  00076	48 89 44 24 28	 mov	 QWORD PTR text$1[rsp], rax

; 845  : 
; 846  : 			text->addc	(text, ' ');

  0007b	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00080	48 8b 4c 24 28	 mov	 rcx, QWORD PTR text$1[rsp]
  00085	48 8b 44 24 28	 mov	 rax, QWORD PTR text$1[rsp]
  0008a	ff 50 70	 call	 QWORD PTR [rax+112]

; 847  : 			text->addi	(text, p->getType(p));

  0008d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$[rsp]
  00092	48 8b 44 24 58	 mov	 rax, QWORD PTR p$[rsp]
  00097	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]
  0009d	8b d0		 mov	 edx, eax
  0009f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR text$1[rsp]
  000a4	48 8b 44 24 28	 mov	 rax, QWORD PTR text$1[rsp]
  000a9	ff 50 78	 call	 QWORD PTR [rax+120]
  000ac	90		 npad	 1
$LN6@toStringWo:

; 848  : 		}
; 849  : 
; 850  : 		buf->appendS(buf, text);

  000ad	48 8b 54 24 28	 mov	 rdx, QWORD PTR text$1[rsp]
  000b2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp]
  000b7	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  000bc	ff 50 58	 call	 QWORD PTR [rax+88]
  000bf	90		 npad	 1
$LN5@toStringWo:

; 851  : 	}
; 852  : 
; 853  : 	if	(p == stop)

  000c0	48 8b 44 24 60	 mov	 rax, QWORD PTR stop$[rsp]
  000c5	48 39 44 24 58	 cmp	 QWORD PTR p$[rsp], rax
  000ca	75 05		 jne	 SHORT $LN7@toStringWo

; 854  : 	{
; 855  : 		return;		/* Finished */

  000cc	e9 ed 00 00 00	 jmp	 $LN1@toStringWo
$LN7@toStringWo:

; 856  : 	}
; 857  : 
; 858  : 	n = p->getChildCount(p);

  000d1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$[rsp]
  000d6	48 8b 44 24 58	 mov	 rax, QWORD PTR p$[rsp]
  000db	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  000e1	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax

; 859  : 
; 860  : 	if	(n > 0 && ! p->isNilNode(p) )

  000e5	83 7c 24 20 00	 cmp	 DWORD PTR n$[rsp], 0
  000ea	76 3c		 jbe	 SHORT $LN8@toStringWo
  000ec	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$[rsp]
  000f1	48 8b 44 24 58	 mov	 rax, QWORD PTR p$[rsp]
  000f6	ff 90 c0 00 00
	00		 call	 QWORD PTR [rax+192]
  000fc	0f b6 c0	 movzx	 eax, al
  000ff	85 c0		 test	 eax, eax
  00101	75 25		 jne	 SHORT $LN8@toStringWo

; 861  : 	{
; 862  : 		buf->addc   (buf, ' ');

  00103	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00108	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp]
  0010d	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  00112	ff 50 70	 call	 QWORD PTR [rax+112]

; 863  : 		buf->addi   (buf, ANTLR3_TOKEN_DOWN);

  00115	ba 02 00 00 00	 mov	 edx, 2
  0011a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp]
  0011f	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  00124	ff 50 78	 call	 QWORD PTR [rax+120]
  00127	90		 npad	 1
$LN8@toStringWo:

; 864  : 	}
; 865  : 
; 866  : 	for	(c = 0; c<n ; c++)

  00128	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR c$[rsp], 0
  00130	eb 0a		 jmp	 SHORT $LN4@toStringWo
$LN2@toStringWo:
  00132	8b 44 24 24	 mov	 eax, DWORD PTR c$[rsp]
  00136	ff c0		 inc	 eax
  00138	89 44 24 24	 mov	 DWORD PTR c$[rsp], eax
$LN4@toStringWo:
  0013c	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  00140	39 44 24 24	 cmp	 DWORD PTR c$[rsp], eax
  00144	73 35		 jae	 SHORT $LN3@toStringWo

; 867  : 	{
; 868  : 		pANTLR3_BASE_TREE   child;
; 869  : 
; 870  : 		child = p->getChild(p, c);

  00146	8b 54 24 24	 mov	 edx, DWORD PTR c$[rsp]
  0014a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$[rsp]
  0014f	48 8b 44 24 58	 mov	 rax, QWORD PTR p$[rsp]
  00154	ff 50 70	 call	 QWORD PTR [rax+112]
  00157	48 89 44 24 30	 mov	 QWORD PTR child$2[rsp], rax

; 871  : 		tns->toStringWork(tns, child, stop, buf);

  0015c	4c 8b 4c 24 68	 mov	 r9, QWORD PTR buf$[rsp]
  00161	4c 8b 44 24 60	 mov	 r8, QWORD PTR stop$[rsp]
  00166	48 8b 54 24 30	 mov	 rdx, QWORD PTR child$2[rsp]
  0016b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tns$[rsp]
  00170	48 8b 44 24 50	 mov	 rax, QWORD PTR tns$[rsp]
  00175	ff 50 40	 call	 QWORD PTR [rax+64]
  00178	90		 npad	 1

; 872  : 	}

  00179	eb b7		 jmp	 SHORT $LN2@toStringWo
$LN3@toStringWo:

; 873  : 
; 874  : 	if	(n > 0 && ! p->isNilNode(p) )

  0017b	83 7c 24 20 00	 cmp	 DWORD PTR n$[rsp], 0
  00180	76 3c		 jbe	 SHORT $LN9@toStringWo
  00182	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$[rsp]
  00187	48 8b 44 24 58	 mov	 rax, QWORD PTR p$[rsp]
  0018c	ff 90 c0 00 00
	00		 call	 QWORD PTR [rax+192]
  00192	0f b6 c0	 movzx	 eax, al
  00195	85 c0		 test	 eax, eax
  00197	75 25		 jne	 SHORT $LN9@toStringWo

; 875  : 	{
; 876  : 		buf->addc   (buf, ' ');

  00199	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0019e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp]
  001a3	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  001a8	ff 50 70	 call	 QWORD PTR [rax+112]

; 877  : 		buf->addi   (buf, ANTLR3_TOKEN_UP);

  001ab	ba 03 00 00 00	 mov	 edx, 3
  001b0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp]
  001b5	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  001ba	ff 50 78	 call	 QWORD PTR [rax+120]
  001bd	90		 npad	 1
$LN9@toStringWo:
$LN1@toStringWo:

; 878  : 	}
; 879  : }

  001be	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001c2	5f		 pop	 rdi
  001c3	c3		 ret	 0
toStringWork ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT toStringSS
_TEXT	SEGMENT
buf$ = 32
tv76 = 40
tns$ = 64
start$ = 72
stop$ = 80
toStringSS PROC						; COMDAT

; 819  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 820  :     pANTLR3_STRING  buf;
; 821  : 
; 822  :     buf = tns->ctns->stringFactory->newRaw(tns->ctns->stringFactory);

  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  00019	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tns$[rsp]
  00021	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00024	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00028	48 89 4c 24 28	 mov	 QWORD PTR tv76[rsp], rcx
  0002d	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00031	48 8b 44 24 28	 mov	 rax, QWORD PTR tv76[rsp]
  00036	ff 50 10	 call	 QWORD PTR [rax+16]
  00039	48 89 44 24 20	 mov	 QWORD PTR buf$[rsp], rax

; 823  : 
; 824  :     tns->toStringWork(tns, start, stop, buf);

  0003e	4c 8b 4c 24 20	 mov	 r9, QWORD PTR buf$[rsp]
  00043	4c 8b 44 24 50	 mov	 r8, QWORD PTR stop$[rsp]
  00048	48 8b 54 24 48	 mov	 rdx, QWORD PTR start$[rsp]
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tns$[rsp]
  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  00057	ff 50 40	 call	 QWORD PTR [rax+64]

; 825  : 
; 826  :     return  buf;

  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]

; 827  : }

  0005f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
toStringSS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT toString
_TEXT	SEGMENT
tns$ = 48
toString PROC						; COMDAT

; 812  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 813  : 
; 814  :     return  tns->toStringSS(tns, tns->ctns->root, NULL);

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR tns$[rsp]
  0000f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00012	45 33 c0	 xor	 r8d, r8d
  00015	48 8b 90 08 05
	00 00		 mov	 rdx, QWORD PTR [rax+1288]
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tns$[rsp]
  00021	48 8b 44 24 30	 mov	 rax, QWORD PTR tns$[rsp]
  00026	ff 50 38	 call	 QWORD PTR [rax+56]

; 815  : }

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT setUniqueNavigationNodes
_TEXT	SEGMENT
tns$ = 16
uniqueNavigationNodes$ = 24
setUniqueNavigationNodes PROC				; COMDAT

; 801  : {

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi

; 802  :     tns->ctns->uniqueNavigationNodes = uniqueNavigationNodes;

  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR tns$[rsp]
  0000f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00012	0f b6 4c 24 18	 movzx	 ecx, BYTE PTR uniqueNavigationNodes$[rsp]
  00017	88 88 00 05 00
	00		 mov	 BYTE PTR [rax+1280], cl

; 803  : }

  0001d	5f		 pop	 rdi
  0001e	c3		 ret	 0
setUniqueNavigationNodes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT get
_TEXT	SEGMENT
tv77 = 32
tns$ = 64
k$ = 72
get	PROC						; COMDAT

; 944  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 945  : 	if	(tns->ctns->p == -1)

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	83 b8 20 05 00
	00 ff		 cmp	 DWORD PTR [rax+1312], -1
  0001d	75 0e		 jne	 SHORT $LN2@get

; 946  : 	{
; 947  : 		fillBufferRoot(tns->ctns);

  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  00024	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00027	e8 00 00 00 00	 call	 fillBufferRoot
  0002c	90		 npad	 1
$LN2@get:

; 948  : 	}
; 949  : 
; 950  : 	return tns->ctns->nodes->get(tns->ctns->nodes, k);

  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  00032	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tns$[rsp]
  0003a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0003d	48 8b 89 f8 04
	00 00		 mov	 rcx, QWORD PTR [rcx+1272]
  00044	48 89 4c 24 20	 mov	 QWORD PTR tv77[rsp], rcx
  00049	8b 54 24 48	 mov	 edx, DWORD PTR k$[rsp]
  0004d	48 8b 88 f8 04
	00 00		 mov	 rcx, QWORD PTR [rax+1272]
  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR tv77[rsp]
  00059	ff 90 28 01 00
	00		 call	 QWORD PTR [rax+296]

; 951  : }

  0005f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
get	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT _LT
_TEXT	SEGMENT
tv131 = 32
tns$ = 64
k$ = 72
_LT	PROC						; COMDAT

; 578  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 579  : 	if	(tns->ctns->p == -1)

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	83 b8 20 05 00
	00 ff		 cmp	 DWORD PTR [rax+1312], -1
  0001d	75 0e		 jne	 SHORT $LN2@LT

; 580  : 	{
; 581  : 		fillBufferRoot(tns->ctns);

  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  00024	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00027	e8 00 00 00 00	 call	 fillBufferRoot
  0002c	90		 npad	 1
$LN2@LT:

; 582  : 	}
; 583  : 
; 584  : 	if	(k < 0)

  0002d	83 7c 24 48 00	 cmp	 DWORD PTR k$[rsp], 0
  00032	7d 19		 jge	 SHORT $LN3@LT

; 585  : 	{
; 586  : 		return LB(tns, -k);

  00034	8b 44 24 48	 mov	 eax, DWORD PTR k$[rsp]
  00038	f7 d8		 neg	 eax
  0003a	8b d0		 mov	 edx, eax
  0003c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tns$[rsp]
  00041	e8 00 00 00 00	 call	 LB
  00046	e9 9c 00 00 00	 jmp	 $LN1@LT

; 587  : 	}

  0004b	eb 1a		 jmp	 SHORT $LN4@LT
$LN3@LT:

; 588  : 	else if	(k == 0)

  0004d	83 7c 24 48 00	 cmp	 DWORD PTR k$[rsp], 0
  00052	75 13		 jne	 SHORT $LN5@LT

; 589  : 	{
; 590  : 		return	&(tns->ctns->INVALID_NODE.baseTree);

  00054	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 05 f8 03 00
	00		 add	 rax, 1016		; 000003f8H
  00062	e9 80 00 00 00	 jmp	 $LN1@LT
$LN5@LT:
$LN4@LT:

; 591  : 	}
; 592  : 
; 593  : 	// k was a legitimate request, 
; 594  : 	//
; 595  : 	if	(( tns->ctns->p + k - 1) >= (ANTLR3_INT32)(tns->ctns->nodes->count))

  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  0006c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006f	8b 80 20 05 00
	00		 mov	 eax, DWORD PTR [rax+1312]
  00075	8b 4c 24 48	 mov	 ecx, DWORD PTR k$[rsp]
  00079	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  0007d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tns$[rsp]
  00082	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00085	48 8b 89 f8 04
	00 00		 mov	 rcx, QWORD PTR [rcx+1272]
  0008c	3b 41 08	 cmp	 eax, DWORD PTR [rcx+8]
  0008f	7c 10		 jl	 SHORT $LN6@LT

; 596  : 	{
; 597  : 		return &(tns->ctns->EOF_NODE.baseTree);

  00091	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 05 c0 02 00
	00		 add	 rax, 704		; 000002c0H
  0009f	eb 46		 jmp	 SHORT $LN1@LT
$LN6@LT:

; 598  : 	}
; 599  : 
; 600  : 	return	tns->ctns->nodes->get(tns->ctns->nodes, tns->ctns->p + k - 1);

  000a1	48 8b 44 24 40	 mov	 rax, QWORD PTR tns$[rsp]
  000a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a9	8b 80 20 05 00
	00		 mov	 eax, DWORD PTR [rax+1312]
  000af	8b 4c 24 48	 mov	 ecx, DWORD PTR k$[rsp]
  000b3	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  000b7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tns$[rsp]
  000bc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000bf	48 8b 54 24 40	 mov	 rdx, QWORD PTR tns$[rsp]
  000c4	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  000c7	48 8b 92 f8 04
	00 00		 mov	 rdx, QWORD PTR [rdx+1272]
  000ce	48 89 54 24 20	 mov	 QWORD PTR tv131[rsp], rdx
  000d3	8b d0		 mov	 edx, eax
  000d5	48 8b 89 f8 04
	00 00		 mov	 rcx, QWORD PTR [rcx+1272]
  000dc	48 8b 44 24 20	 mov	 rax, QWORD PTR tv131[rsp]
  000e1	ff 90 28 01 00
	00		 call	 QWORD PTR [rax+296]
$LN1@LT:

; 601  : }

  000e7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000eb	5f		 pop	 rdi
  000ec	c3		 ret	 0
_LT	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT getTreeSource
_TEXT	SEGMENT
tns$ = 16
getTreeSource PROC					; COMDAT

; 608  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 609  :     return  tns->ctns->root;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR tns$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000e	48 8b 80 08 05
	00 00		 mov	 rax, QWORD PTR [rax+1288]

; 610  : }

  00015	5f		 pop	 rdi
  00016	c3		 ret	 0
getTreeSource ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT getTreeAdaptor
_TEXT	SEGMENT
tns$ = 16
getTreeAdaptor PROC					; COMDAT

; 789  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 790  :     return  tns->ctns->adaptor;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR tns$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000e	48 8b 80 10 05
	00 00		 mov	 rax, QWORD PTR [rax+1296]

; 791  : }

  00015	5f		 pop	 rdi
  00016	c3		 ret	 0
getTreeAdaptor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT getLookaheadSize
_TEXT	SEGMENT
tv75 = 0
ctns$ = 32
getLookaheadSize PROC					; COMDAT

; 883  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16

; 884  :     return	ctns->tail < ctns->head 

  0000a	48 8b 44 24 20	 mov	 rax, QWORD PTR ctns$[rsp]
  0000f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ctns$[rsp]
  00014	8b 89 54 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1364]
  0001a	39 88 58 05 00
	00		 cmp	 DWORD PTR [rax+1368], ecx
  00020	73 28		 jae	 SHORT $LN3@getLookahe
  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR ctns$[rsp]
  00027	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ctns$[rsp]
  0002c	8b 89 54 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1364]
  00032	8b 80 50 05 00
	00		 mov	 eax, DWORD PTR [rax+1360]
  00038	2b c1		 sub	 eax, ecx
  0003a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ctns$[rsp]
  0003f	03 81 58 05 00
	00		 add	 eax, DWORD PTR [rcx+1368]
  00045	89 04 24	 mov	 DWORD PTR tv75[rsp], eax
  00048	eb 1b		 jmp	 SHORT $LN4@getLookahe
$LN3@getLookahe:
  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR ctns$[rsp]
  0004f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ctns$[rsp]
  00054	8b 89 54 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1364]
  0005a	8b 80 58 05 00
	00		 mov	 eax, DWORD PTR [rax+1368]
  00060	2b c1		 sub	 eax, ecx
  00062	89 04 24	 mov	 DWORD PTR tv75[rsp], eax
$LN4@getLookahe:
  00065	8b 04 24	 mov	 eax, DWORD PTR tv75[rsp]

; 885  : 	    ?	(ctns->lookAheadLength - ctns->head + ctns->tail)
; 886  : 	    :	(ctns->tail - ctns->head);
; 887  : }

  00068	48 83 c4 10	 add	 rsp, 16
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
getLookaheadSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT pop
_TEXT	SEGMENT
retVal$ = 32
tv78 = 40
ctns$ = 64
pop	PROC						; COMDAT

; 962  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 963  : 	ANTLR3_INT32	retVal;
; 964  : 
; 965  : 	retVal = ANTLR3_UINT32_CAST(ctns->nodeStack->pop(ctns->nodeStack));

  0000a	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  0000f	48 8b 80 18 05
	00 00		 mov	 rax, QWORD PTR [rax+1304]
  00016	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  0001b	48 8b 89 18 05
	00 00		 mov	 rcx, QWORD PTR [rcx+1304]
  00022	ff 50 18	 call	 QWORD PTR [rax+24]
  00025	89 44 24 20	 mov	 DWORD PTR retVal$[rsp], eax

; 966  : 	ctns->tnstream->istream->seek(ctns->tnstream->istream, retVal);

  00029	48 63 44 24 20	 movsxd	 rax, DWORD PTR retVal$[rsp]
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  00033	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00037	48 8b 54 24 40	 mov	 rdx, QWORD PTR ctns$[rsp]
  0003c	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00040	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00044	48 89 54 24 28	 mov	 QWORD PTR tv78[rsp], rdx
  00049	48 8b d0	 mov	 rdx, rax
  0004c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00050	48 8b 44 24 28	 mov	 rax, QWORD PTR tv78[rsp]
  00055	ff 50 60	 call	 QWORD PTR [rax+96]

; 967  : 	return retVal;

  00058	8b 44 24 20	 mov	 eax, DWORD PTR retVal$[rsp]

; 968  : }

  0005c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
pop	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT push
_TEXT	SEGMENT
tv83 = 32
tv80 = 40
ctns$ = 64
index$ = 72
push	PROC						; COMDAT

; 955  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 956  : 	ctns->nodeStack->push(ctns->nodeStack, ANTLR3_FUNC_PTR(ctns->p), NULL);	// Save current index

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00013	48 63 80 20 05
	00 00		 movsxd	 rax, DWORD PTR [rax+1312]
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  0001f	48 8b 89 18 05
	00 00		 mov	 rcx, QWORD PTR [rcx+1304]
  00026	48 89 4c 24 20	 mov	 QWORD PTR tv83[rsp], rcx
  0002b	45 33 c0	 xor	 r8d, r8d
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00036	48 8b 88 18 05
	00 00		 mov	 rcx, QWORD PTR [rax+1304]
  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR tv83[rsp]
  00042	ff 50 28	 call	 QWORD PTR [rax+40]

; 957  : 	ctns->tnstream->istream->seek(ctns->tnstream->istream, index);

  00045	48 63 44 24 48	 movsxd	 rax, DWORD PTR index$[rsp]
  0004a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  0004f	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00053	48 8b 54 24 40	 mov	 rdx, QWORD PTR ctns$[rsp]
  00058	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  0005c	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00060	48 89 54 24 28	 mov	 QWORD PTR tv80[rsp], rdx
  00065	48 8b d0	 mov	 rdx, rax
  00068	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0006c	48 8b 44 24 28	 mov	 rax, QWORD PTR tv80[rsp]
  00071	ff 50 60	 call	 QWORD PTR [rax+96]
  00074	90		 npad	 1

; 958  : }

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5f		 pop	 rdi
  0007a	c3		 ret	 0
push	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT reset
_TEXT	SEGMENT
ctns$ = 48
reset	PROC						; COMDAT

; 527  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 528  : 	if	(ctns->p != -1)

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR ctns$[rsp]
  0000f	83 b8 20 05 00
	00 ff		 cmp	 DWORD PTR [rax+1312], -1
  00016	74 0f		 je	 SHORT $LN2@reset

; 529  : 	{
; 530  : 		ctns->p									= 0;

  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR ctns$[rsp]
  0001d	c7 80 20 05 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+1312], 0
$LN2@reset:

; 531  : 	}
; 532  : 	ctns->tnstream->istream->lastMarker		= 0;

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR ctns$[rsp]
  0002c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00030	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00034	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 533  : 
; 534  : 
; 535  : 	// Free and reset the node stack only if this is not
; 536  : 	// a rewriter, which is going to reuse the originating
; 537  : 	// node streams node stack
; 538  : 	//
; 539  : 	if  (ctns->isRewriter != ANTLR3_TRUE)

  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR ctns$[rsp]
  00041	0f b6 80 e8 05
	00 00		 movzx	 eax, BYTE PTR [rax+1512]
  00048	83 f8 01	 cmp	 eax, 1
  0004b	74 40		 je	 SHORT $LN3@reset

; 540  :     {
; 541  : 		if	(ctns->nodeStack != NULL)

  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR ctns$[rsp]
  00052	48 83 b8 18 05
	00 00 00	 cmp	 QWORD PTR [rax+1304], 0
  0005a	74 31		 je	 SHORT $LN4@reset

; 542  : 		{
; 543  : 			ctns->nodeStack->free(ctns->nodeStack);

  0005c	48 8b 44 24 30	 mov	 rax, QWORD PTR ctns$[rsp]
  00061	48 8b 80 18 05
	00 00		 mov	 rax, QWORD PTR [rax+1304]
  00068	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ctns$[rsp]
  0006d	48 8b 89 18 05
	00 00		 mov	 rcx, QWORD PTR [rcx+1304]
  00074	ff 50 10	 call	 QWORD PTR [rax+16]

; 544  : 			ctns->nodeStack = antlr3StackNew(INITIAL_CALL_STACK_SIZE);

  00077	b9 0a 00 00 00	 mov	 ecx, 10
  0007c	e8 00 00 00 00	 call	 antlr3StackNew
  00081	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ctns$[rsp]
  00086	48 89 81 18 05
	00 00		 mov	 QWORD PTR [rcx+1304], rax
$LN4@reset:
$LN3@reset:

; 545  : 		}
; 546  : 	}
; 547  : }

  0008d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
reset	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT newUpNode
_TEXT	SEGMENT
uNode$ = 32
token$ = 40
ctns$ = 64
newUpNode PROC						; COMDAT

; 905  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 906  :     pANTLR3_COMMON_TREE	    uNode;
; 907  :     pANTLR3_COMMON_TOKEN    token;
; 908  : 
; 909  :     token					= antlr3CommonTokenNew(ANTLR3_TOKEN_UP);

  0000a	b9 03 00 00 00	 mov	 ecx, 3
  0000f	e8 00 00 00 00	 call	 antlr3CommonTokenNew
  00014	48 89 44 24 28	 mov	 QWORD PTR token$[rsp], rax

; 910  : 	token->textState		= ANTLR3_TEXT_CHARP;

  00019	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  0001e	c7 40 48 01 00
	00 00		 mov	 DWORD PTR [rax+72], 1

; 911  : 	token->tokText.chars	= (pANTLR3_UCHAR)"UP";

  00025	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02NAHCJHOC@UP@
  00031	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 912  :     uNode					= antlr3CommonTreeNewFromToken(token);

  00035	48 8b 4c 24 28	 mov	 rcx, QWORD PTR token$[rsp]
  0003a	e8 00 00 00 00	 call	 antlr3CommonTreeNewFromToken
  0003f	48 89 44 24 20	 mov	 QWORD PTR uNode$[rsp], rax

; 913  : 
; 914  :     return  &(uNode->baseTree);

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR uNode$[rsp]
  00049	48 83 c0 38	 add	 rax, 56			; 00000038H

; 915  : }

  0004d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
newUpNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT newDownNode
_TEXT	SEGMENT
dNode$ = 32
token$ = 40
ctns$ = 64
newDownNode PROC					; COMDAT

; 891  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 892  :     pANTLR3_COMMON_TREE	    dNode;
; 893  :     pANTLR3_COMMON_TOKEN    token;
; 894  : 
; 895  :     token					= antlr3CommonTokenNew(ANTLR3_TOKEN_DOWN);

  0000a	b9 02 00 00 00	 mov	 ecx, 2
  0000f	e8 00 00 00 00	 call	 antlr3CommonTokenNew
  00014	48 89 44 24 28	 mov	 QWORD PTR token$[rsp], rax

; 896  : 	token->textState		= ANTLR3_TEXT_CHARP;

  00019	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  0001e	c7 40 48 01 00
	00 00		 mov	 DWORD PTR [rax+72], 1

; 897  : 	token->tokText.chars	= (pANTLR3_UCHAR)"DOWN";

  00025	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04FANAOELO@DOWN@
  00031	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 898  :     dNode					= antlr3CommonTreeNewFromToken(token);

  00035	48 8b 4c 24 28	 mov	 rcx, QWORD PTR token$[rsp]
  0003a	e8 00 00 00 00	 call	 antlr3CommonTreeNewFromToken
  0003f	48 89 44 24 20	 mov	 QWORD PTR dNode$[rsp], rax

; 899  : 
; 900  :     return  &(dNode->baseTree);

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR dNode$[rsp]
  00049	48 83 c0 38	 add	 rax, 56			; 00000038H

; 901  : }

  0004d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
newDownNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT hasUniqueNavigationNodes
_TEXT	SEGMENT
ctns$ = 16
hasUniqueNavigationNodes PROC				; COMDAT

; 795  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 796  :     return  ctns->uniqueNavigationNodes;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR ctns$[rsp]
  0000b	0f b6 80 00 05
	00 00		 movzx	 eax, BYTE PTR [rax+1280]

; 797  : }

  00012	5f		 pop	 rdi
  00013	c3		 ret	 0
hasUniqueNavigationNodes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT addNavigationNode
_TEXT	SEGMENT
node$ = 32
ctns$ = 64
ttype$ = 72
addNavigationNode PROC					; COMDAT

; 753  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 754  : 	pANTLR3_BASE_TREE	    node;
; 755  : 
; 756  : 	node = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR node$[rsp], 0

; 757  : 
; 758  : 	if	(ttype == ANTLR3_TOKEN_DOWN)

  00017	83 7c 24 48 02	 cmp	 DWORD PTR ttype$[rsp], 2
  0001c	75 3f		 jne	 SHORT $LN2@addNavigat

; 759  : 	{
; 760  : 		if  (ctns->hasUniqueNavigationNodes(ctns) == ANTLR3_TRUE)

  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00028	ff 90 b8 05 00
	00		 call	 QWORD PTR [rax+1464]
  0002e	0f b6 c0	 movzx	 eax, al
  00031	83 f8 01	 cmp	 eax, 1
  00034	75 17		 jne	 SHORT $LN4@addNavigat

; 761  : 		{
; 762  : 			node    = ctns->newDownNode(ctns);

  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00040	ff 90 a0 05 00
	00		 call	 QWORD PTR [rax+1440]
  00046	48 89 44 24 20	 mov	 QWORD PTR node$[rsp], rax

; 763  : 		}

  0004b	eb 0e		 jmp	 SHORT $LN5@addNavigat
$LN4@addNavigat:

; 764  : 		else
; 765  : 		{
; 766  : 			node    = &(ctns->DOWN.baseTree);

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00052	48 83 c0 50	 add	 rax, 80			; 00000050H
  00056	48 89 44 24 20	 mov	 QWORD PTR node$[rsp], rax
$LN5@addNavigat:

; 767  : 		}
; 768  : 	}

  0005b	eb 3f		 jmp	 SHORT $LN3@addNavigat
$LN2@addNavigat:

; 769  : 	else
; 770  : 	{
; 771  : 		if  (ctns->hasUniqueNavigationNodes(ctns) == ANTLR3_TRUE)

  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00067	ff 90 b8 05 00
	00		 call	 QWORD PTR [rax+1464]
  0006d	0f b6 c0	 movzx	 eax, al
  00070	83 f8 01	 cmp	 eax, 1
  00073	75 17		 jne	 SHORT $LN6@addNavigat

; 772  : 		{
; 773  : 			node    = ctns->newUpNode(ctns);

  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  0007f	ff 90 a8 05 00
	00		 call	 QWORD PTR [rax+1448]
  00085	48 89 44 24 20	 mov	 QWORD PTR node$[rsp], rax

; 774  : 		}

  0008a	eb 10		 jmp	 SHORT $LN7@addNavigat
$LN6@addNavigat:

; 775  : 		else
; 776  : 		{
; 777  : 			node    = &(ctns->UP.baseTree);

  0008c	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  00091	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  00097	48 89 44 24 20	 mov	 QWORD PTR node$[rsp], rax
$LN7@addNavigat:
$LN3@addNavigat:

; 778  : 		}
; 779  : 	}
; 780  : 
; 781  : 	// Now add the node we decided upon.
; 782  : 	//
; 783  : 	ctns->nodes->add(ctns->nodes, node, NULL);

  0009c	48 8b 44 24 40	 mov	 rax, QWORD PTR ctns$[rsp]
  000a1	48 8b 80 f8 04
	00 00		 mov	 rax, QWORD PTR [rax+1272]
  000a8	45 33 c0	 xor	 r8d, r8d
  000ab	48 8b 54 24 20	 mov	 rdx, QWORD PTR node$[rsp]
  000b0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ctns$[rsp]
  000b5	48 8b 89 f8 04
	00 00		 mov	 rcx, QWORD PTR [rcx+1272]
  000bc	ff 90 48 01 00
	00		 call	 QWORD PTR [rax+328]
  000c2	90		 npad	 1

; 784  : }

  000c3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
addNavigationNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT antlr3TreeNodeStreamNew
_TEXT	SEGMENT
stream$ = 32
antlr3TreeNodeStreamNew PROC				; COMDAT

; 89   : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 90   :     pANTLR3_TREE_NODE_STREAM stream;
; 91   : 
; 92   :     // Memory for the interface structure
; 93   :     //
; 94   :     stream  = (pANTLR3_TREE_NODE_STREAM) ANTLR3_CALLOC(1, sizeof(ANTLR3_TREE_NODE_STREAM));

  00006	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  0000b	b9 01 00 00 00	 mov	 ecx, 1
  00010	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00016	48 89 44 24 20	 mov	 QWORD PTR stream$[rsp], rax

; 95   : 
; 96   :     if	(stream == NULL)

  0001b	48 83 7c 24 20
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00021	75 04		 jne	 SHORT $LN2@antlr3Tree

; 97   :     {
; 98   : 		return	NULL;

  00023	33 c0		 xor	 eax, eax
  00025	eb 25		 jmp	 SHORT $LN1@antlr3Tree
$LN2@antlr3Tree:

; 99   :     }
; 100  : 
; 101  :     // Install basic API 
; 102  :     //
; 103  : 	stream->replaceChildren = replaceChildren;

  00027	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:replaceChildren
  00033	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 104  :     stream->free			= antlr3TreeNodeStreamFree;

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:antlr3TreeNodeStreamFree
  00043	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 105  :     
; 106  :     return stream;

  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
$LN1@antlr3Tree:

; 107  : }

  0004c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00050	5f		 pop	 rdi
  00051	c3		 ret	 0
antlr3TreeNodeStreamNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT antlr3CommonTreeNodeStreamNewStream
_TEXT	SEGMENT
stream$ = 32
inStream$ = 64
antlr3CommonTreeNodeStreamNewStream PROC		; COMDAT

; 133  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 134  : 	pANTLR3_COMMON_TREE_NODE_STREAM stream;
; 135  : 
; 136  : 	// Memory for the interface structure
; 137  : 	//
; 138  : 	stream  = (pANTLR3_COMMON_TREE_NODE_STREAM) ANTLR3_CALLOC(1, sizeof(ANTLR3_COMMON_TREE_NODE_STREAM));

  0000a	ba f0 05 00 00	 mov	 edx, 1520		; 000005f0H
  0000f	b9 01 00 00 00	 mov	 ecx, 1
  00014	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  0001a	48 89 44 24 20	 mov	 QWORD PTR stream$[rsp], rax

; 139  : 
; 140  : 	if	(stream == NULL)

  0001f	48 83 7c 24 20
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00025	75 07		 jne	 SHORT $LN2@antlr3Comm

; 141  : 	{
; 142  : 		return	NULL;

  00027	33 c0		 xor	 eax, eax
  00029	e9 9d 04 00 00	 jmp	 $LN1@antlr3Comm
$LN2@antlr3Comm:

; 143  : 	}
; 144  : 
; 145  : 	// Copy in all the reusable parts of the originating stream and create new
; 146  : 	// pieces where necessary.
; 147  : 	//
; 148  : 
; 149  : 	// String factory for tree walker
; 150  : 	//
; 151  : 	stream->stringFactory		= inStream->stringFactory;

  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inStream$[rsp]
  00038	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0003c	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 152  : 
; 153  : 	// Create an adaptor for the common tree node stream
; 154  : 	//
; 155  : 	stream->adaptor				= inStream->adaptor;

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00045	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inStream$[rsp]
  0004a	48 8b 89 10 05
	00 00		 mov	 rcx, QWORD PTR [rcx+1296]
  00051	48 89 88 10 05
	00 00		 mov	 QWORD PTR [rax+1296], rcx

; 156  : 
; 157  : 	// Create space for the tree node stream interface
; 158  : 	//
; 159  : 	stream->tnstream	    = antlr3TreeNodeStreamNew();

  00058	e8 00 00 00 00	 call	 antlr3TreeNodeStreamNew
  0005d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  00062	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 160  : 
; 161  : 	if	(stream->tnstream == NULL)

  00066	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0006b	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00070	75 17		 jne	 SHORT $LN3@antlr3Comm

; 162  : 	{
; 163  : 		stream->free				(stream);

  00072	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0007c	ff 90 e0 05 00
	00		 call	 QWORD PTR [rax+1504]

; 164  : 
; 165  : 		return	NULL;

  00082	33 c0		 xor	 eax, eax
  00084	e9 42 04 00 00	 jmp	 $LN1@antlr3Comm
$LN3@antlr3Comm:

; 166  : 	}
; 167  : 
; 168  : 	// Create space for the INT_STREAM interface
; 169  : 	//
; 170  : 	stream->tnstream->istream		    =  antlr3IntStreamNew();

  00089	e8 00 00 00 00	 call	 antlr3IntStreamNew
  0008e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  00093	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00097	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 171  : 
; 172  : 	if	(stream->tnstream->istream == NULL)

  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  000a0	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000a4	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000a9	75 2c		 jne	 SHORT $LN4@antlr3Comm

; 173  : 	{
; 174  : 		stream->tnstream->free		(stream->tnstream);

  000ab	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  000b0	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000b4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  000b9	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000bd	ff 50 48	 call	 QWORD PTR [rax+72]

; 175  : 		stream->free				(stream);

  000c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  000c5	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  000ca	ff 90 e0 05 00
	00		 call	 QWORD PTR [rax+1504]

; 176  : 
; 177  : 		return	NULL;

  000d0	33 c0		 xor	 eax, eax
  000d2	e9 f4 03 00 00	 jmp	 $LN1@antlr3Comm
$LN4@antlr3Comm:

; 178  : 	}
; 179  : 
; 180  : 	// Install the common tree node stream API
; 181  : 	//
; 182  : 	stream->addNavigationNode		    =  addNavigationNode;

  000d7	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:addNavigationNode
  000e3	48 89 88 98 05
	00 00		 mov	 QWORD PTR [rax+1432], rcx

; 183  : 	stream->hasUniqueNavigationNodes    =  hasUniqueNavigationNodes;

  000ea	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hasUniqueNavigationNodes
  000f6	48 89 88 b8 05
	00 00		 mov	 QWORD PTR [rax+1464], rcx

; 184  : 	stream->newDownNode					=  newDownNode;

  000fd	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:newDownNode
  00109	48 89 88 a0 05
	00 00		 mov	 QWORD PTR [rax+1440], rcx

; 185  : 	stream->newUpNode					=  newUpNode;

  00110	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:newUpNode
  0011c	48 89 88 a8 05
	00 00		 mov	 QWORD PTR [rax+1448], rcx

; 186  : 	stream->reset						=  reset;

  00123	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00128	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:reset
  0012f	48 89 88 d8 05
	00 00		 mov	 QWORD PTR [rax+1496], rcx

; 187  : 	stream->push						=  push;

  00136	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:push
  00142	48 89 88 c8 05
	00 00		 mov	 QWORD PTR [rax+1480], rcx

; 188  : 	stream->pop							=  pop;

  00149	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0014e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pop
  00155	48 89 88 d0 05
	00 00		 mov	 QWORD PTR [rax+1488], rcx

; 189  : 	stream->getLookaheadSize			=  getLookaheadSize;

  0015c	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getLookaheadSize
  00168	48 89 88 c0 05
	00 00		 mov	 QWORD PTR [rax+1472], rcx

; 190  : 
; 191  : 	stream->free			    =  antlr3CommonTreeNodeStreamFree;

  0016f	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:antlr3CommonTreeNodeStreamFree
  0017b	48 89 88 e0 05
	00 00		 mov	 QWORD PTR [rax+1504], rcx

; 192  : 
; 193  : 	// Install the tree node stream API
; 194  : 	//
; 195  : 	stream->tnstream->getTreeAdaptor			=  getTreeAdaptor;

  00182	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00187	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0018b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getTreeAdaptor
  00192	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 196  : 	stream->tnstream->getTreeSource				=  getTreeSource;

  00196	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0019b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0019f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getTreeSource
  001a6	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 197  : 	stream->tnstream->_LT						=  _LT;

  001aa	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  001af	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_LT
  001ba	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 198  : 	stream->tnstream->setUniqueNavigationNodes	=  setUniqueNavigationNodes;

  001be	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  001c3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:setUniqueNavigationNodes
  001ce	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 199  : 	stream->tnstream->toString					=  toString;

  001d2	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  001d7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:toString
  001e2	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 200  : 	stream->tnstream->toStringSS				=  toStringSS;

  001e6	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  001eb	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:toStringSS
  001f6	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 201  : 	stream->tnstream->toStringWork				=  toStringWork;

  001fa	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  001ff	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:toStringWork
  0020a	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 202  : 	stream->tnstream->get						=  get;

  0020e	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00213	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00217	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:get
  0021e	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 203  : 
; 204  : 	// Install INT_STREAM interface
; 205  : 	//
; 206  : 	stream->tnstream->istream->consume	    =  consume;

  00222	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00227	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0022b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:consume
  00236	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 207  : 	stream->tnstream->istream->index	    =  tindex;

  0023a	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0023f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00243	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tindex
  0024e	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 208  : 	stream->tnstream->istream->_LA			=  _LA;

  00252	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00257	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0025b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0025f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_LA
  00266	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 209  : 	stream->tnstream->istream->mark			=  mark;

  0026a	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0026f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00273	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00277	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:mark
  0027e	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 210  : 	stream->tnstream->istream->release	    =  release;

  00282	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00287	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0028b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0028f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:release
  00296	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 211  : 	stream->tnstream->istream->rewind	    =  rewindMark;

  0029a	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0029f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002a3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:rewindMark
  002ae	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 212  : 	stream->tnstream->istream->rewindLast   =  rewindLast;

  002b2	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  002b7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002bb	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:rewindLast
  002c6	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 213  : 	stream->tnstream->istream->seek			=  seek;

  002ca	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  002cf	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002d3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:seek
  002de	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 214  : 	stream->tnstream->istream->size			=  size;

  002e2	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  002e7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002eb	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:size
  002f6	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 215  : 
; 216  : 	// Initialize data elements of INT stream
; 217  : 	//
; 218  : 	stream->tnstream->istream->type			= ANTLR3_COMMONTREENODE;

  002fa	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  002ff	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00303	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00307	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 219  : 	stream->tnstream->istream->super	    =  (stream->tnstream);

  0030d	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00312	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00316	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0031a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  0031f	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00323	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 220  : 
; 221  : 	// Initialize data elements of TREE stream
; 222  : 	//
; 223  : 	stream->tnstream->ctns =  stream;

  00327	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0032c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00330	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  00335	48 89 08	 mov	 QWORD PTR [rax], rcx

; 224  : 
; 225  : 	// Initialize data elements of the COMMON TREE NODE stream
; 226  : 	//
; 227  : 	stream->super					= NULL;

  00338	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0033d	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 228  : 	stream->uniqueNavigationNodes	= ANTLR3_FALSE;

  00344	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00349	c6 80 00 05 00
	00 00		 mov	 BYTE PTR [rax+1280], 0

; 229  : 	stream->markers					= NULL;

  00350	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00355	48 c7 80 60 05
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1376], 0

; 230  : 	stream->nodeStack				= inStream->nodeStack;

  00360	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00365	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inStream$[rsp]
  0036a	48 8b 89 18 05
	00 00		 mov	 rcx, QWORD PTR [rcx+1304]
  00371	48 89 88 18 05
	00 00		 mov	 QWORD PTR [rax+1304], rcx

; 231  : 
; 232  : 	// Create the node list map
; 233  : 	//
; 234  : 	stream->nodes	= antlr3VectorNew(DEFAULT_INITIAL_BUFFER_SIZE);

  00378	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0037d	e8 00 00 00 00	 call	 antlr3VectorNew
  00382	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  00387	48 89 81 f8 04
	00 00		 mov	 QWORD PTR [rcx+1272], rax

; 235  : 	stream->p		= -1;

  0038e	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00393	c7 80 20 05 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+1312], -1

; 236  : 
; 237  : 	// Install the navigation nodes     
; 238  : 	//
; 239  : 	
; 240  : 	// Install the navigation nodes     
; 241  : 	//
; 242  : 	antlr3SetCTAPI(&(stream->UP));

  0039d	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  003a2	48 05 50 01 00
	00		 add	 rax, 336		; 00000150H
  003a8	48 8b c8	 mov	 rcx, rax
  003ab	e8 00 00 00 00	 call	 antlr3SetCTAPI

; 243  : 	antlr3SetCTAPI(&(stream->DOWN));

  003b0	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  003b5	48 83 c0 18	 add	 rax, 24
  003b9	48 8b c8	 mov	 rcx, rax
  003bc	e8 00 00 00 00	 call	 antlr3SetCTAPI

; 244  : 	antlr3SetCTAPI(&(stream->EOF_NODE));

  003c1	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  003c6	48 05 88 02 00
	00		 add	 rax, 648		; 00000288H
  003cc	48 8b c8	 mov	 rcx, rax
  003cf	e8 00 00 00 00	 call	 antlr3SetCTAPI

; 245  : 	antlr3SetCTAPI(&(stream->INVALID_NODE));

  003d4	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  003d9	48 05 c0 03 00
	00		 add	 rax, 960		; 000003c0H
  003df	48 8b c8	 mov	 rcx, rax
  003e2	e8 00 00 00 00	 call	 antlr3SetCTAPI

; 246  : 
; 247  : 	stream->UP.token						= inStream->UP.token;

  003e7	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  003ec	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inStream$[rsp]
  003f1	48 8b 89 68 01
	00 00		 mov	 rcx, QWORD PTR [rcx+360]
  003f8	48 89 88 68 01
	00 00		 mov	 QWORD PTR [rax+360], rcx

; 248  : 	inStream->UP.token->strFactory			= stream->stringFactory;

  003ff	48 8b 44 24 40	 mov	 rax, QWORD PTR inStream$[rsp]
  00404	48 8b 80 68 01
	00 00		 mov	 rax, QWORD PTR [rax+360]
  0040b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  00410	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00414	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 249  : 	stream->DOWN.token						= inStream->DOWN.token;

  00418	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0041d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inStream$[rsp]
  00422	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00426	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 250  : 	inStream->DOWN.token->strFactory		= stream->stringFactory;

  0042a	48 8b 44 24 40	 mov	 rax, QWORD PTR inStream$[rsp]
  0042f	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00433	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  00438	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0043c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 251  : 	stream->EOF_NODE.token					= inStream->EOF_NODE.token;

  00440	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00445	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inStream$[rsp]
  0044a	48 8b 89 a0 02
	00 00		 mov	 rcx, QWORD PTR [rcx+672]
  00451	48 89 88 a0 02
	00 00		 mov	 QWORD PTR [rax+672], rcx

; 252  : 	inStream->EOF_NODE.token->strFactory	= stream->stringFactory;

  00458	48 8b 44 24 40	 mov	 rax, QWORD PTR inStream$[rsp]
  0045d	48 8b 80 a0 02
	00 00		 mov	 rax, QWORD PTR [rax+672]
  00464	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  00469	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0046d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 253  : 	stream->INVALID_NODE.token				= inStream->INVALID_NODE.token;

  00471	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00476	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inStream$[rsp]
  0047b	48 8b 89 d8 03
	00 00		 mov	 rcx, QWORD PTR [rcx+984]
  00482	48 89 88 d8 03
	00 00		 mov	 QWORD PTR [rax+984], rcx

; 254  : 	inStream->INVALID_NODE.token->strFactory= stream->stringFactory;

  00489	48 8b 44 24 40	 mov	 rax, QWORD PTR inStream$[rsp]
  0048e	48 8b 80 d8 03
	00 00		 mov	 rax, QWORD PTR [rax+984]
  00495	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  0049a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0049e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 255  : 
; 256  : 	// Reuse the root tree of the originating stream
; 257  : 	//
; 258  : 	stream->root		= inStream->root;

  004a2	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  004a7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inStream$[rsp]
  004ac	48 8b 89 08 05
	00 00		 mov	 rcx, QWORD PTR [rcx+1288]
  004b3	48 89 88 08 05
	00 00		 mov	 QWORD PTR [rax+1288], rcx

; 259  : 
; 260  : 	// Signal that this is a rewriting stream so we don't
; 261  : 	// free the originating tree. Anything that we rewrite or
; 262  : 	// duplicate here will be done through the adaptor or 
; 263  : 	// the original tree factory.
; 264  : 	//
; 265  : 	stream->isRewriter	= ANTLR3_TRUE;

  004ba	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  004bf	c6 80 e8 05 00
	00 01		 mov	 BYTE PTR [rax+1512], 1

; 266  : 	return stream;

  004c6	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
$LN1@antlr3Comm:

; 267  : }

  004cb	48 83 c4 30	 add	 rsp, 48			; 00000030H
  004cf	5f		 pop	 rdi
  004d0	c3		 ret	 0
antlr3CommonTreeNodeStreamNewStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT antlr3CommonTreeNodeStreamNew
_TEXT	SEGMENT
stream$ = 32
token$ = 40
strFactory$ = 64
hint$ = 72
antlr3CommonTreeNodeStreamNew PROC			; COMDAT

; 271  : {

$LN8:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 272  : 	pANTLR3_COMMON_TREE_NODE_STREAM stream;
; 273  : 	pANTLR3_COMMON_TOKEN			token;
; 274  : 
; 275  : 	// Memory for the interface structure
; 276  : 	//
; 277  : 	stream  = (pANTLR3_COMMON_TREE_NODE_STREAM) ANTLR3_CALLOC(1, sizeof(ANTLR3_COMMON_TREE_NODE_STREAM));

  0000e	ba f0 05 00 00	 mov	 edx, 1520		; 000005f0H
  00013	b9 01 00 00 00	 mov	 ecx, 1
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  0001e	48 89 44 24 20	 mov	 QWORD PTR stream$[rsp], rax

; 278  : 
; 279  : 	if	(stream == NULL)

  00023	48 83 7c 24 20
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00029	75 07		 jne	 SHORT $LN2@antlr3Comm

; 280  : 	{
; 281  : 		return	NULL;

  0002b	33 c0		 xor	 eax, eax
  0002d	e9 35 05 00 00	 jmp	 $LN1@antlr3Comm
$LN2@antlr3Comm:

; 282  : 	}
; 283  : 
; 284  : 	// String factory for tree walker
; 285  : 	//
; 286  : 	stream->stringFactory		= strFactory;

  00032	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR strFactory$[rsp]
  0003c	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 287  : 
; 288  : 	// Create an adaptor for the common tree node stream
; 289  : 	//
; 290  : 	stream->adaptor				= ANTLR3_TREE_ADAPTORNew(strFactory);

  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR strFactory$[rsp]
  00045	e8 00 00 00 00	 call	 ANTLR3_TREE_ADAPTORNew
  0004a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  0004f	48 89 81 10 05
	00 00		 mov	 QWORD PTR [rcx+1296], rax

; 291  : 
; 292  : 	if	(stream->adaptor == NULL)

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0005b	48 83 b8 10 05
	00 00 00	 cmp	 QWORD PTR [rax+1296], 0
  00063	75 17		 jne	 SHORT $LN3@antlr3Comm

; 293  : 	{
; 294  : 		stream->free(stream);

  00065	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  0006a	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0006f	ff 90 e0 05 00
	00		 call	 QWORD PTR [rax+1504]

; 295  : 		return	NULL;

  00075	33 c0		 xor	 eax, eax
  00077	e9 eb 04 00 00	 jmp	 $LN1@antlr3Comm
$LN3@antlr3Comm:

; 296  : 	}
; 297  : 
; 298  : 	// Create space for the tree node stream interface
; 299  : 	//
; 300  : 	stream->tnstream	    = antlr3TreeNodeStreamNew();

  0007c	e8 00 00 00 00	 call	 antlr3TreeNodeStreamNew
  00081	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  00086	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 301  : 
; 302  : 	if	(stream->tnstream == NULL)

  0008a	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0008f	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00094	75 35		 jne	 SHORT $LN4@antlr3Comm

; 303  : 	{
; 304  : 		stream->adaptor->free		(stream->adaptor);

  00096	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0009b	48 8b 80 10 05
	00 00		 mov	 rax, QWORD PTR [rax+1296]
  000a2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  000a7	48 8b 89 10 05
	00 00		 mov	 rcx, QWORD PTR [rcx+1296]
  000ae	ff 90 50 01 00
	00		 call	 QWORD PTR [rax+336]

; 305  : 		stream->free				(stream);

  000b4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  000b9	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  000be	ff 90 e0 05 00
	00		 call	 QWORD PTR [rax+1504]

; 306  : 
; 307  : 		return	NULL;

  000c4	33 c0		 xor	 eax, eax
  000c6	e9 9c 04 00 00	 jmp	 $LN1@antlr3Comm
$LN4@antlr3Comm:

; 308  : 	}
; 309  : 
; 310  : 	// Create space for the INT_STREAM interface
; 311  : 	//
; 312  : 	stream->tnstream->istream		    =  antlr3IntStreamNew();

  000cb	e8 00 00 00 00	 call	 antlr3IntStreamNew
  000d0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  000d5	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000d9	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 313  : 
; 314  : 	if	(stream->tnstream->istream == NULL)

  000dd	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  000e2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e6	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000eb	75 4a		 jne	 SHORT $LN5@antlr3Comm

; 315  : 	{
; 316  : 		stream->adaptor->free		(stream->adaptor);

  000ed	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  000f2	48 8b 80 10 05
	00 00		 mov	 rax, QWORD PTR [rax+1296]
  000f9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  000fe	48 8b 89 10 05
	00 00		 mov	 rcx, QWORD PTR [rcx+1296]
  00105	ff 90 50 01 00
	00		 call	 QWORD PTR [rax+336]

; 317  : 		stream->tnstream->free		(stream->tnstream);

  0010b	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00110	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00114	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  00119	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0011d	ff 50 48	 call	 QWORD PTR [rax+72]

; 318  : 		stream->free				(stream);

  00120	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  00125	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0012a	ff 90 e0 05 00
	00		 call	 QWORD PTR [rax+1504]

; 319  : 
; 320  : 		return	NULL;

  00130	33 c0		 xor	 eax, eax
  00132	e9 30 04 00 00	 jmp	 $LN1@antlr3Comm
$LN5@antlr3Comm:

; 321  : 	}
; 322  : 
; 323  : 	// Install the common tree node stream API
; 324  : 	//
; 325  : 	stream->addNavigationNode		    =  addNavigationNode;

  00137	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:addNavigationNode
  00143	48 89 88 98 05
	00 00		 mov	 QWORD PTR [rax+1432], rcx

; 326  : 	stream->hasUniqueNavigationNodes    =  hasUniqueNavigationNodes;

  0014a	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hasUniqueNavigationNodes
  00156	48 89 88 b8 05
	00 00		 mov	 QWORD PTR [rax+1464], rcx

; 327  : 	stream->newDownNode					=  newDownNode;

  0015d	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:newDownNode
  00169	48 89 88 a0 05
	00 00		 mov	 QWORD PTR [rax+1440], rcx

; 328  : 	stream->newUpNode					=  newUpNode;

  00170	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00175	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:newUpNode
  0017c	48 89 88 a8 05
	00 00		 mov	 QWORD PTR [rax+1448], rcx

; 329  : 	stream->reset						=  reset;

  00183	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:reset
  0018f	48 89 88 d8 05
	00 00		 mov	 QWORD PTR [rax+1496], rcx

; 330  : 	stream->push						=  push;

  00196	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:push
  001a2	48 89 88 c8 05
	00 00		 mov	 QWORD PTR [rax+1480], rcx

; 331  : 	stream->pop							=  pop;

  001a9	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  001ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pop
  001b5	48 89 88 d0 05
	00 00		 mov	 QWORD PTR [rax+1488], rcx

; 332  : 
; 333  : 	stream->free			    =  antlr3CommonTreeNodeStreamFree;

  001bc	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  001c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:antlr3CommonTreeNodeStreamFree
  001c8	48 89 88 e0 05
	00 00		 mov	 QWORD PTR [rax+1504], rcx

; 334  : 
; 335  : 	// Install the tree node stream API
; 336  : 	//
; 337  : 	stream->tnstream->getTreeAdaptor			=  getTreeAdaptor;

  001cf	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  001d4	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getTreeAdaptor
  001df	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 338  : 	stream->tnstream->getTreeSource				=  getTreeSource;

  001e3	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  001e8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getTreeSource
  001f3	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 339  : 	stream->tnstream->_LT						=  _LT;

  001f7	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  001fc	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_LT
  00207	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 340  : 	stream->tnstream->setUniqueNavigationNodes	=  setUniqueNavigationNodes;

  0020b	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00210	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00214	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:setUniqueNavigationNodes
  0021b	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 341  : 	stream->tnstream->toString					=  toString;

  0021f	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00224	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00228	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:toString
  0022f	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 342  : 	stream->tnstream->toStringSS				=  toStringSS;

  00233	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00238	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0023c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:toStringSS
  00243	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 343  : 	stream->tnstream->toStringWork				=  toStringWork;

  00247	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0024c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:toStringWork
  00257	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 344  : 	stream->tnstream->get						=  get;

  0025b	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00260	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00264	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:get
  0026b	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 345  : 
; 346  : 	// Install INT_STREAM interface
; 347  : 	//
; 348  : 	stream->tnstream->istream->consume	    =  consume;

  0026f	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00274	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00278	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0027c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:consume
  00283	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 349  : 	stream->tnstream->istream->index	    =  tindex;

  00287	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0028c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00290	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00294	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tindex
  0029b	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 350  : 	stream->tnstream->istream->_LA			=  _LA;

  0029f	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  002a4	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002a8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_LA
  002b3	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 351  : 	stream->tnstream->istream->mark			=  mark;

  002b7	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  002bc	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002c0	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:mark
  002cb	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 352  : 	stream->tnstream->istream->release	    =  release;

  002cf	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  002d4	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002d8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:release
  002e3	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 353  : 	stream->tnstream->istream->rewind	    =  rewindMark;

  002e7	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  002ec	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002f0	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:rewindMark
  002fb	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 354  : 	stream->tnstream->istream->rewindLast   =  rewindLast;

  002ff	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00304	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00308	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0030c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:rewindLast
  00313	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 355  : 	stream->tnstream->istream->seek			=  seek;

  00317	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0031c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00320	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00324	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:seek
  0032b	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 356  : 	stream->tnstream->istream->size			=  size;

  0032f	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00334	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00338	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0033c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:size
  00343	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 357  : 
; 358  : 	// Initialize data elements of INT stream
; 359  : 	//
; 360  : 	stream->tnstream->istream->type			= ANTLR3_COMMONTREENODE;

  00347	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0034c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00350	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00354	c7 00 04 00 00
	00		 mov	 DWORD PTR [rax], 4

; 361  : 	stream->tnstream->istream->super	    =  (stream->tnstream);

  0035a	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0035f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00363	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00367	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  0036c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00370	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 362  : 
; 363  : 	// Initialize data elements of TREE stream
; 364  : 	//
; 365  : 	stream->tnstream->ctns =  stream;

  00374	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00379	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0037d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  00382	48 89 08	 mov	 QWORD PTR [rax], rcx

; 366  : 
; 367  : 	// Initialize data elements of the COMMON TREE NODE stream
; 368  : 	//
; 369  : 	stream->super					= NULL;

  00385	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0038a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 370  : 	stream->uniqueNavigationNodes	= ANTLR3_FALSE;

  00391	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00396	c6 80 00 05 00
	00 00		 mov	 BYTE PTR [rax+1280], 0

; 371  : 	stream->markers					= NULL;

  0039d	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  003a2	48 c7 80 60 05
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1376], 0

; 372  : 	stream->nodeStack				= antlr3StackNew(INITIAL_CALL_STACK_SIZE);

  003ad	b9 0a 00 00 00	 mov	 ecx, 10
  003b2	e8 00 00 00 00	 call	 antlr3StackNew
  003b7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  003bc	48 89 81 18 05
	00 00		 mov	 QWORD PTR [rcx+1304], rax

; 373  : 
; 374  : 	// Create the node list map
; 375  : 	//
; 376  : 	if	(hint == 0)

  003c3	83 7c 24 48 00	 cmp	 DWORD PTR hint$[rsp], 0
  003c8	75 08		 jne	 SHORT $LN6@antlr3Comm

; 377  : 	{
; 378  : 		hint = DEFAULT_INITIAL_BUFFER_SIZE;

  003ca	c7 44 24 48 64
	00 00 00	 mov	 DWORD PTR hint$[rsp], 100 ; 00000064H
$LN6@antlr3Comm:

; 379  : 	}
; 380  : 	stream->nodes	= antlr3VectorNew(hint);

  003d2	8b 4c 24 48	 mov	 ecx, DWORD PTR hint$[rsp]
  003d6	e8 00 00 00 00	 call	 antlr3VectorNew
  003db	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stream$[rsp]
  003e0	48 89 81 f8 04
	00 00		 mov	 QWORD PTR [rcx+1272], rax

; 381  : 	stream->p		= -1;

  003e7	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  003ec	c7 80 20 05 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+1312], -1

; 382  : 
; 383  : 	// Install the navigation nodes     
; 384  : 	//
; 385  : 	antlr3SetCTAPI(&(stream->UP));

  003f6	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  003fb	48 05 50 01 00
	00		 add	 rax, 336		; 00000150H
  00401	48 8b c8	 mov	 rcx, rax
  00404	e8 00 00 00 00	 call	 antlr3SetCTAPI

; 386  : 	antlr3SetCTAPI(&(stream->DOWN));

  00409	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0040e	48 83 c0 18	 add	 rax, 24
  00412	48 8b c8	 mov	 rcx, rax
  00415	e8 00 00 00 00	 call	 antlr3SetCTAPI

; 387  : 	antlr3SetCTAPI(&(stream->EOF_NODE));

  0041a	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0041f	48 05 88 02 00
	00		 add	 rax, 648		; 00000288H
  00425	48 8b c8	 mov	 rcx, rax
  00428	e8 00 00 00 00	 call	 antlr3SetCTAPI

; 388  : 	antlr3SetCTAPI(&(stream->INVALID_NODE));

  0042d	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00432	48 05 c0 03 00
	00		 add	 rax, 960		; 000003c0H
  00438	48 8b c8	 mov	 rcx, rax
  0043b	e8 00 00 00 00	 call	 antlr3SetCTAPI

; 389  : 
; 390  : 	token						= antlr3CommonTokenNew(ANTLR3_TOKEN_UP);

  00440	b9 03 00 00 00	 mov	 ecx, 3
  00445	e8 00 00 00 00	 call	 antlr3CommonTokenNew
  0044a	48 89 44 24 28	 mov	 QWORD PTR token$[rsp], rax

; 391  : 	token->strFactory			= strFactory;

  0044f	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  00454	48 8b 4c 24 40	 mov	 rcx, QWORD PTR strFactory$[rsp]
  00459	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 392  : 	token->textState			= ANTLR3_TEXT_CHARP;

  0045d	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  00462	c7 40 48 01 00
	00 00		 mov	 DWORD PTR [rax+72], 1

; 393  : 	token->tokText.chars		= (pANTLR3_UCHAR)"UP";

  00469	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  0046e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02NAHCJHOC@UP@
  00475	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 394  : 	stream->UP.token			= token;

  00479	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0047e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR token$[rsp]
  00483	48 89 88 68 01
	00 00		 mov	 QWORD PTR [rax+360], rcx

; 395  : 
; 396  : 	token						= antlr3CommonTokenNew(ANTLR3_TOKEN_DOWN);

  0048a	b9 02 00 00 00	 mov	 ecx, 2
  0048f	e8 00 00 00 00	 call	 antlr3CommonTokenNew
  00494	48 89 44 24 28	 mov	 QWORD PTR token$[rsp], rax

; 397  : 	token->strFactory			= strFactory;

  00499	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  0049e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR strFactory$[rsp]
  004a3	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 398  : 	token->textState			= ANTLR3_TEXT_CHARP;

  004a7	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  004ac	c7 40 48 01 00
	00 00		 mov	 DWORD PTR [rax+72], 1

; 399  : 	token->tokText.chars		= (pANTLR3_UCHAR)"DOWN";

  004b3	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  004b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04FANAOELO@DOWN@
  004bf	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 400  : 	stream->DOWN.token			= token;

  004c3	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  004c8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR token$[rsp]
  004cd	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 401  : 
; 402  : 	token						= antlr3CommonTokenNew(ANTLR3_TOKEN_EOF);

  004d1	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  004d6	e8 00 00 00 00	 call	 antlr3CommonTokenNew
  004db	48 89 44 24 28	 mov	 QWORD PTR token$[rsp], rax

; 403  : 	token->strFactory			= strFactory;

  004e0	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  004e5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR strFactory$[rsp]
  004ea	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 404  : 	token->textState			= ANTLR3_TEXT_CHARP;

  004ee	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  004f3	c7 40 48 01 00
	00 00		 mov	 DWORD PTR [rax+72], 1

; 405  : 	token->tokText.chars		= (pANTLR3_UCHAR)"EOF";

  004fa	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  004ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03KPJEKKJC@EOF@
  00506	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 406  : 	stream->EOF_NODE.token		= token;

  0050a	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  0050f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR token$[rsp]
  00514	48 89 88 a0 02
	00 00		 mov	 QWORD PTR [rax+672], rcx

; 407  : 
; 408  : 	token						= antlr3CommonTokenNew(ANTLR3_TOKEN_INVALID);

  0051b	33 c9		 xor	 ecx, ecx
  0051d	e8 00 00 00 00	 call	 antlr3CommonTokenNew
  00522	48 89 44 24 28	 mov	 QWORD PTR token$[rsp], rax

; 409  : 	token->strFactory			= strFactory;

  00527	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  0052c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR strFactory$[rsp]
  00531	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 410  : 	token->textState			= ANTLR3_TEXT_CHARP;

  00535	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  0053a	c7 40 48 01 00
	00 00		 mov	 DWORD PTR [rax+72], 1

; 411  : 	token->tokText.chars		= (pANTLR3_UCHAR)"INVALID";

  00541	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  00546	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DNODLGKM@INVALID@
  0054d	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 412  : 	stream->INVALID_NODE.token	= token;

  00551	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00556	48 8b 4c 24 28	 mov	 rcx, QWORD PTR token$[rsp]
  0055b	48 89 88 d8 03
	00 00		 mov	 QWORD PTR [rax+984], rcx

; 413  : 
; 414  : 
; 415  : 	return  stream;

  00562	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
$LN1@antlr3Comm:

; 416  : }

  00567	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0056b	5f		 pop	 rdi
  0056c	c3		 ret	 0
antlr3CommonTreeNodeStreamNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\TBG\source\repos\SPO_LAB3\Nix_LabN1\libantlr3c-3.4\src\antlr3commontreenodestream.c
;	COMDAT antlr3CommonTreeNodeStreamNewTree
_TEXT	SEGMENT
stream$ = 32
tree$ = 64
hint$ = 72
antlr3CommonTreeNodeStreamNewTree PROC			; COMDAT

; 117  : {

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 118  : 	pANTLR3_COMMON_TREE_NODE_STREAM stream;
; 119  : 
; 120  : 	stream = antlr3CommonTreeNodeStreamNew(tree->strFactory, hint);

  0000e	8b 54 24 48	 mov	 edx, DWORD PTR hint$[rsp]
  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00017	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0001b	e8 00 00 00 00	 call	 antlr3CommonTreeNodeStreamNew
  00020	48 89 44 24 20	 mov	 QWORD PTR stream$[rsp], rax

; 121  : 
; 122  : 	if	(stream == NULL)

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR stream$[rsp], 0
  0002b	75 04		 jne	 SHORT $LN2@antlr3Comm

; 123  : 	{
; 124  : 		return	NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 16		 jmp	 SHORT $LN1@antlr3Comm
$LN2@antlr3Comm:

; 125  : 	}
; 126  : 	stream->root    = tree;

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0003b	48 89 88 08 05
	00 00		 mov	 QWORD PTR [rax+1288], rcx

; 127  : 
; 128  : 	return stream;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR stream$[rsp]
$LN1@antlr3Comm:

; 129  : }

  00047	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
antlr3CommonTreeNodeStreamNewTree ENDP
_TEXT	ENDS
END
