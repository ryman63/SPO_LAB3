; Listing generated by Microsoft (R) Optimizing Compiler Version 19.38.33139.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	antlr3ParserNewStreamDbg
PUBLIC	antlr3ParserNewStream
PUBLIC	antlr3ParserNew
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	antlr3BaseRecognizerNew:PROC
EXTRN	antlr3MTExceptionNew:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3ParserNewStreamDbg DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$antlr3ParserNewStreamDbg
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3ParserNewStream DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$antlr3ParserNewStream
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3ParserNew DD imagerel $LN5
	DD	imagerel $LN5+217
	DD	imagerel $unwind$antlr3ParserNew
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setDebugListener DD imagerel setDebugListener
	DD	imagerel setDebugListener+77
	DD	imagerel $unwind$setDebugListener
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setTokenStream DD imagerel setTokenStream
	DD	imagerel setTokenStream+59
	DD	imagerel $unwind$setTokenStream
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getTokenStream DD imagerel getTokenStream
	DD	imagerel getTokenStream+17
	DD	imagerel $unwind$getTokenStream
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$freeParser DD imagerel freeParser
	DD	imagerel freeParser+184
	DD	imagerel $unwind$freeParser
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$freeParser DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getTokenStream DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setTokenStream DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setDebugListener DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3ParserNew DD 020e01H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3ParserNewStream DD 021301H
	DD	0700f5213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3ParserNewStreamDbg DD 021801H
	DD	070145218H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Nix_LabN3\Nix_LabN1\libantlr3c-3.4\src\antlr3parser.c
;	COMDAT freeParser
_TEXT	SEGMENT
tv93 = 32
parser$ = 64
freeParser PROC						; COMDAT

; 123  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 124  :     if	(parser->rec != NULL)

  0000a	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  0000f	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00014	0f 84 8d 00 00
	00		 je	 $LN2@freeParser

; 125  :     {
; 126  : 		// This may have ben a delegate or delegator parser, in which case the
; 127  : 		// state may already have been freed (and set to NULL therefore)
; 128  : 		// so we ignore the state if we don't have it.
; 129  : 		//
; 130  : 		if	(parser->rec->state != NULL)

  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  0001f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00023	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00028	74 58		 je	 SHORT $LN3@freeParser

; 131  : 		{
; 132  : 			if	(parser->rec->state->following != NULL)

  0002a	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  0002f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00033	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00037	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0003c	74 44		 je	 SHORT $LN4@freeParser

; 133  : 			{
; 134  : 				parser->rec->state->following->free(parser->rec->state->following);

  0003e	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  00043	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00047	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR parser$[rsp]
  00050	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00054	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00058	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0005c	48 89 4c 24 20	 mov	 QWORD PTR tv93[rsp], rcx
  00061	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR tv93[rsp]
  0006a	ff 50 10	 call	 QWORD PTR [rax+16]

; 135  : 				parser->rec->state->following = NULL;

  0006d	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  00072	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00076	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0007a	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
$LN4@freeParser:
$LN3@freeParser:

; 136  : 			}
; 137  : 		}
; 138  : 	    parser->rec->free(parser->rec);

  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  00087	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR parser$[rsp]
  00090	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00094	ff 90 20 01 00
	00		 call	 QWORD PTR [rax+288]

; 139  : 	    parser->rec	= NULL;

  0009a	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  0009f	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@freeParser:

; 140  : 
; 141  :     }
; 142  :     ANTLR3_FREE(parser);

  000a7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR parser$[rsp]
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 143  : }

  000b2	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b6	5f		 pop	 rdi
  000b7	c3		 ret	 0
freeParser ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Nix_LabN3\Nix_LabN1\libantlr3c-3.4\src\antlr3parser.c
;	COMDAT getTokenStream
_TEXT	SEGMENT
parser$ = 16
getTokenStream PROC					; COMDAT

; 177  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 178  :     return  parser->tstream;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR parser$[rsp]
  0000b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 179  : }

  0000f	5f		 pop	 rdi
  00010	c3		 ret	 0
getTokenStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Nix_LabN3\Nix_LabN1\libantlr3c-3.4\src\antlr3parser.c
;	COMDAT setTokenStream
_TEXT	SEGMENT
parser$ = 48
tstream$ = 56
setTokenStream PROC					; COMDAT

; 170  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 171  :     parser->tstream = tstream;

  0000f	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00014	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tstream$[rsp]
  00019	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 172  :     parser->rec->reset(parser->rec);

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00022	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR parser$[rsp]
  0002b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0002f	ff 90 18 01 00
	00		 call	 QWORD PTR [rax+280]

; 173  : }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
setTokenStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Nix_LabN3\Nix_LabN1\libantlr3c-3.4\src\antlr3parser.c
;	COMDAT setDebugListener
_TEXT	SEGMENT
parser$ = 48
dbg$ = 56
setDebugListener PROC					; COMDAT

; 147  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 148  : 	// Set the debug listener. There are no methods to override
; 149  : 	// because currently the only ones that notify the debugger
; 150  : 	// are error reporting and recovery. Hence we can afford to
; 151  : 	// check and see if the debugger interface is null or not
; 152  : 	// there. If there is ever an occasion for a performance
; 153  : 	// sensitive function to use the debugger interface, then
; 154  : 	// a replacement function for debug mode should be supplied
; 155  : 	// and installed here.
; 156  : 	//
; 157  : 	parser->rec->debugger	= dbg;

  0000f	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00014	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dbg$[rsp]
  0001d	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 158  : 
; 159  : 	// If there was a tokenstream installed already
; 160  : 	// then we need to tell it about the debug interface
; 161  : 	//
; 162  : 	if	(parser->tstream != NULL)

  00021	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00026	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0002b	74 1a		 je	 SHORT $LN2@setDebugLi

; 163  : 	{
; 164  : 		parser->tstream->setDebugListener(parser->tstream, dbg);

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00032	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00036	48 8b 54 24 38	 mov	 rdx, QWORD PTR dbg$[rsp]
  0003b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR parser$[rsp]
  00040	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00044	ff 50 60	 call	 QWORD PTR [rax+96]
$LN2@setDebugLi:

; 165  : 	}
; 166  : }

  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
setDebugListener ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Nix_LabN3\Nix_LabN1\libantlr3c-3.4\src\antlr3parser.c
;	COMDAT antlr3ParserNew
_TEXT	SEGMENT
parser$ = 32
sizeHint$ = 64
state$ = 72
antlr3ParserNew PROC					; COMDAT

; 62   : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 63   :     pANTLR3_PARSER	parser;
; 64   : 
; 65   :     /* Allocate memory
; 66   :      */
; 67   :     parser	= (pANTLR3_PARSER) ANTLR3_MALLOC(sizeof(ANTLR3_PARSER));

  0000e	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00019	48 89 44 24 20	 mov	 QWORD PTR parser$[rsp], rax

; 68   : 
; 69   :     if	(parser == NULL)

  0001e	48 83 7c 24 20
	00		 cmp	 QWORD PTR parser$[rsp], 0
  00024	75 07		 jne	 SHORT $LN2@antlr3Pars

; 70   :     {
; 71   : 		return	NULL;

  00026	33 c0		 xor	 eax, eax
  00028	e9 a6 00 00 00	 jmp	 $LN1@antlr3Pars
$LN2@antlr3Pars:

; 72   :     }
; 73   : 
; 74   :     /* Install a base parser
; 75   :      */
; 76   :     parser->rec =  antlr3BaseRecognizerNew(ANTLR3_TYPE_PARSER, sizeHint, state);

  0002d	4c 8b 44 24 48	 mov	 r8, QWORD PTR state$[rsp]
  00032	8b 54 24 40	 mov	 edx, DWORD PTR sizeHint$[rsp]
  00036	b9 02 00 00 00	 mov	 ecx, 2
  0003b	e8 00 00 00 00	 call	 antlr3BaseRecognizerNew
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR parser$[rsp]
  00045	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 77   : 
; 78   :     if	(parser->rec == NULL)

  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  0004e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00053	75 11		 jne	 SHORT $LN3@antlr3Pars

; 79   :     {
; 80   : 		parser->free(parser);

  00055	48 8b 4c 24 20	 mov	 rcx, QWORD PTR parser$[rsp]
  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  0005f	ff 50 30	 call	 QWORD PTR [rax+48]

; 81   : 		return	NULL;

  00062	33 c0		 xor	 eax, eax
  00064	eb 6d		 jmp	 SHORT $LN1@antlr3Pars
$LN3@antlr3Pars:

; 82   :     }
; 83   : 
; 84   :     parser->rec->super	= parser;

  00066	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  0006b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0006f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR parser$[rsp]
  00074	48 89 08	 mov	 QWORD PTR [rax], rcx

; 85   : 
; 86   :     /* Parser overrides
; 87   :      */
; 88   :     parser->rec->exConstruct	=  antlr3MTExceptionNew;

  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  0007c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:antlr3MTExceptionNew
  00087	48 89 88 10 01
	00 00		 mov	 QWORD PTR [rax+272], rcx

; 89   : 
; 90   :     /* Install the API
; 91   :      */
; 92   : 	parser->setDebugListener	=  setDebugListener;

  0008e	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:setDebugListener
  0009a	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 93   :     parser->setTokenStream		=  setTokenStream;

  0009e	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:setTokenStream
  000aa	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 94   :     parser->getTokenStream		=  getTokenStream;

  000ae	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getTokenStream
  000ba	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 95   : 
; 96   :     parser->free			=  freeParser;

  000be	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:freeParser
  000ca	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 97   : 
; 98   :     return parser;

  000ce	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
$LN1@antlr3Pars:

; 99   : }

  000d3	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d7	5f		 pop	 rdi
  000d8	c3		 ret	 0
antlr3ParserNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Nix_LabN3\Nix_LabN1\libantlr3c-3.4\src\antlr3parser.c
;	COMDAT antlr3ParserNewStream
_TEXT	SEGMENT
parser$ = 32
sizeHint$ = 64
tstream$ = 72
state$ = 80
antlr3ParserNewStream PROC				; COMDAT

; 103  : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 104  :     pANTLR3_PARSER	parser;
; 105  : 
; 106  :     parser  = antlr3ParserNew(sizeHint, state);

  00013	48 8b 54 24 50	 mov	 rdx, QWORD PTR state$[rsp]
  00018	8b 4c 24 40	 mov	 ecx, DWORD PTR sizeHint$[rsp]
  0001c	e8 00 00 00 00	 call	 antlr3ParserNew
  00021	48 89 44 24 20	 mov	 QWORD PTR parser$[rsp], rax

; 107  : 
; 108  :     if	(parser == NULL)

  00026	48 83 7c 24 20
	00		 cmp	 QWORD PTR parser$[rsp], 0
  0002c	75 04		 jne	 SHORT $LN2@antlr3Pars

; 109  :     {
; 110  : 		return	NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	eb 17		 jmp	 SHORT $LN1@antlr3Pars
$LN2@antlr3Pars:

; 111  :     }
; 112  : 
; 113  :     /* Everything seems to be hunky dory so we can install the 
; 114  :      * token stream.
; 115  :      */
; 116  :     parser->setTokenStream(parser, tstream);

  00032	48 8b 54 24 48	 mov	 rdx, QWORD PTR tstream$[rsp]
  00037	48 8b 4c 24 20	 mov	 rcx, QWORD PTR parser$[rsp]
  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  00041	ff 50 20	 call	 QWORD PTR [rax+32]

; 117  : 
; 118  :     return parser;

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
$LN1@antlr3Pars:

; 119  : }

  00049	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
antlr3ParserNewStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Nix_LabN3\Nix_LabN1\libantlr3c-3.4\src\antlr3parser.c
;	COMDAT antlr3ParserNewStreamDbg
_TEXT	SEGMENT
parser$ = 32
sizeHint$ = 64
tstream$ = 72
dbg$ = 80
state$ = 88
antlr3ParserNewStreamDbg PROC				; COMDAT

; 45   : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	57		 push	 rdi
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 46   : 	pANTLR3_PARSER	parser;
; 47   : 
; 48   : 	parser = antlr3ParserNewStream(sizeHint, tstream, state);

  00018	4c 8b 44 24 58	 mov	 r8, QWORD PTR state$[rsp]
  0001d	48 8b 54 24 48	 mov	 rdx, QWORD PTR tstream$[rsp]
  00022	8b 4c 24 40	 mov	 ecx, DWORD PTR sizeHint$[rsp]
  00026	e8 00 00 00 00	 call	 antlr3ParserNewStream
  0002b	48 89 44 24 20	 mov	 QWORD PTR parser$[rsp], rax

; 49   : 
; 50   : 	if	(parser == NULL)

  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR parser$[rsp], 0
  00036	75 04		 jne	 SHORT $LN2@antlr3Pars

; 51   :     {
; 52   : 		return	NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 17		 jmp	 SHORT $LN1@antlr3Pars
$LN2@antlr3Pars:

; 53   :     }
; 54   : 
; 55   : 	parser->setDebugListener(parser, dbg);

  0003c	48 8b 54 24 50	 mov	 rdx, QWORD PTR dbg$[rsp]
  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR parser$[rsp]
  00046	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  0004b	ff 50 18	 call	 QWORD PTR [rax+24]

; 56   : 
; 57   : 	return parser;

  0004e	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
$LN1@antlr3Pars:

; 58   : }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
antlr3ParserNewStreamDbg ENDP
_TEXT	ENDS
END
