/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : custom_lang.g3
 *     -                            On : 2025-01-23 11:11:34
 *     -                 for the lexer : custom_langLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
custom_langLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pcustom_langLexer, which is returned from a call to custom_langLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pcustom_langLexer are  as follows:
 *
 *  - 
 void
      pcustom_langLexer->T__52(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__53(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__54(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__55(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__56(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__57(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__58(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__59(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__60(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__61(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__62(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__63(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__64(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__65(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__66(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__67(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__68(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__69(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__70(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__71(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__72(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__73(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__74(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__75(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__76(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__77(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__78(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__79(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__80(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__81(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__82(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__83(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__84(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__85(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__86(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__87(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__88(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__89(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__90(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__91(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__92(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__93(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__94(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__95(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__96(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->T__97(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->TYPE_REF(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->FUNC_SIGNATURE(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->SOURCE_ITEM(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->STATEMENT(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->EXPR(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->BUILTIN(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->CUSTOM(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->ARRAY(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->ARG(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->ARG_LIST(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->RANGE_LIST(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->FUNC_DEF(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->IF_STATEMENT(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->LOOP_STATEMENT(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->REPEAT_STATEMENT(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->BREAK_STATEMENT(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->EXPRESSION_STATEMENT(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->BLOCK_STATEMENT(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->ASSIGNMENT_EXPR(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->BINARY_EXPR(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->UNARY_EXPR(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->BRACES_EXPR(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->CALL_EXPR(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->SLICE_EXPR(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->PLACE_EXPR(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->LITERAL_EXPR(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->BOOL(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->IDENTIFIER(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->STRING(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->CHAR(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->HEX(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->BITS(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->DEC(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->WS(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->LTS(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->LTSE(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->ADD(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->SUB(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->MUL(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->DIV(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->MOD(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->AND(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->OR(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->EQ(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->NEQ(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->GT(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->GTE(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->ASSIGN(pcustom_langLexer)
 *  - 
 void
      pcustom_langLexer->Tokens(pcustom_langLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_custom_langLexer_H
#define _custom_langLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct custom_langLexer_Ctx_struct custom_langLexer, * pcustom_langLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
custom_langLexer

 */
struct custom_langLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__52)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__53)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__54)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__55)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__56)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__57)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__58)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__59)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__60)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__61)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__62)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__63)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__64)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__65)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__66)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__67)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__68)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__69)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__70)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__71)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__72)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__73)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__74)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__75)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__76)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__77)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__78)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__79)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__80)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__81)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__82)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__83)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__84)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__85)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__86)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__87)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__88)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__89)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__90)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__91)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__92)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__93)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__94)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__95)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__96)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mT__97)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mTYPE_REF)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mFUNC_SIGNATURE)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mSOURCE_ITEM)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mSTATEMENT)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mEXPR)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mBUILTIN)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mCUSTOM)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mARRAY)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mARG)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mARG_LIST)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mRANGE_LIST)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mFUNC_DEF)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mIF_STATEMENT)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mLOOP_STATEMENT)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mREPEAT_STATEMENT)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mBREAK_STATEMENT)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mEXPRESSION_STATEMENT)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mBLOCK_STATEMENT)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mASSIGNMENT_EXPR)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mBINARY_EXPR)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mUNARY_EXPR)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mBRACES_EXPR)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mCALL_EXPR)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mSLICE_EXPR)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mPLACE_EXPR)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mLITERAL_EXPR)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mBOOL)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mHEX)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mBITS)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mDEC)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mLTS)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mLTSE)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mADD)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mSUB)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mMUL)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mDIV)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mMOD)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mEQ)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mNEQ)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mGT)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mGTE)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mASSIGN)	(struct custom_langLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct custom_langLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct custom_langLexer_Ctx_struct * ctx);
    void	    (*free)   (struct custom_langLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pcustom_langLexer custom_langLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pcustom_langLexer custom_langLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define ADD      4
#define AND      5
#define ARG      6
#define ARG_LIST      7
#define ARRAY      8
#define ASSIGN      9
#define ASSIGNMENT_EXPR      10
#define BINARY_EXPR      11
#define BITS      12
#define BLOCK_STATEMENT      13
#define BOOL      14
#define BRACES_EXPR      15
#define BREAK_STATEMENT      16
#define BUILTIN      17
#define CALL_EXPR      18
#define CHAR      19
#define CUSTOM      20
#define DEC      21
#define DIV      22
#define EQ      23
#define EXPR      24
#define EXPRESSION_STATEMENT      25
#define FUNC_DEF      26
#define FUNC_SIGNATURE      27
#define GT      28
#define GTE      29
#define HEX      30
#define IDENTIFIER      31
#define IF_STATEMENT      32
#define LITERAL_EXPR      33
#define LOOP_STATEMENT      34
#define LTS      35
#define LTSE      36
#define MOD      37
#define MUL      38
#define NEQ      39
#define OR      40
#define PLACE_EXPR      41
#define RANGE_LIST      42
#define REPEAT_STATEMENT      43
#define SLICE_EXPR      44
#define SOURCE_ITEM      45
#define STATEMENT      46
#define STRING      47
#define SUB      48
#define TYPE_REF      49
#define UNARY_EXPR      50
#define WS      51
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for custom_langLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
